<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>AutoProjectSetup</title>
		<meta name="author" content="" />
		
		<style>
			* {
				padding: 0;
				margin: 0;
			}
			html, body {
				width: 100%;
				height: 100%;
				font-family: "Century Gothic";
				background-color: #f9f9f9;
				overflow: auto;
			}
			.wrapper {
				width: 800px;
				margin-left: auto;
				margin-right: auto;
				background-color: #fff;
				border: 1px solid #e9e9e9;
				margin-top: 50px;
				padding: 20px;
			}
			.header {
				width: 100%;
				padding-top: 20px;
				padding-bottom: 20px;
			}
			.header h1 {
				color: #404040;
				width: 100%;
				text-align: center;
				font-weight: normal;
				font-size: 50px;
			}
			.header h1 .blue {
				color: #6DBDD6;
				font-size: 60px;
			}
			h2 {
				color: #666666;
				margin-bottom: 20px;
				width: 100%;
				border-bottom: 1px solid #e9e9e9;
			}
			.list {
				width: 100%;
				border-bottom: 1px solid #e9e9e9;
				padding-bottom: 20px;
				margin-bottom: 20px;
			}
			.msg {
				color: #B71427;
			}
			.folder {
				color: #558C89;
			}
			.file {
				color: #D9853B;
			}
			.footer {
				width: 800px;
				margin-left: auto;
				margin-right: auto;
				padding-top: 20px;
				padding-bottom: 50px;
			}
			.footer p {
				font-size: 11px;
				color: #666666;
			}
			.footer a {
				text-decoration: none;
				color: #666666;
			}
			.footer a:hover {
				color: #000;
			}

		</style>
	</head>

	<body>
		<div class="wrapper">
			<div class="header">
				<h1>AUTO<span class="blue">PROJECT</span>SETUP</h1>
			</div>
			<h2>List of Completed Tasks</h2>
			<div class="list">
				<?php
				Class AutoProjectSetup {
					public function init() {
						//make src folder
						$this -> makeFolder("src");
						//make lib folder
						$this -> makeFolder("lib");
						//make lib jasmine folder
						$this -> makeFolder("lib/jasmine-1.3.1");
						//make fahimchowdhury folder
						$this -> makeFolder("lib/fahimchowdhury");
						//make jasmine folder
						$this -> makeFolder("jasmine");
						//make deploy folder
						$this -> makeFolder("deploy");
						//make spec folder
						$this -> makeFolder("jasmine/spec");
						//make resource folder
						$this -> makeFolder("resource");
						//make css folder
						$this -> makeFolder("resource/css");
						//make image folder
						$this -> makeFolder("resource/image");
						
						//create main js file
						$this -> makeMainJS();
						//create style
						$this -> makeStyleSheet();
						//create htmlpage
						$this -> makeHTML();
						//create jasmine html
						$this -> makeJasmineHTML();
						//create jasmine css
						$this -> makeJasmineCSS();
						//create jasmine js
						$this -> makeJasmineJS();
						//create jasmine html
						$this -> makeJasmineLibHTML();
						//create toolkitjs 
						$this -> makeToolkitJS();
					}

					public function makeMainJS() {
						$js = "(function(window) {\n function Main() {\n if(window.addEventListener) {\n window.addEventListener(\"load\", onLoad);\n } else {\n window.attachEvent(\"onload\", onLoad);\n }\n \n }\n function onLoad() {\n\n }\n Main();\n }\n )(window);\n";
						$this -> makeFile("src/main.js", $js);
					}

					public function makeStyleSheet() {
						$style = "*{padding:0;margin:0;}";
						$this -> makeFile("resource/css/style.css", $style);
					}

					public function makeHTML() {
						$html = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n \"http://www.w3.org/TR/html4/strict.dtd\">\n \n <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">\n <head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n <title>index</title>\n <meta name=\"author\" content=\"\" />\n <link type=\"text/css\" rel=\"stylesheet\" href=\"resource/css/style.css\" />\n <script type=\"text/javascript\" src=\"lib/fahimchowdhury/toolkitMax-v1014-compressed.js\"></script>\n <script type=\"text/javascript\" src=\"src/main.js\"></script>\n \n </head>\n <body>\n \n </body>\n </html>\n ";
						$this -> makeFile("index.html", $html);
					}

					public function makeJasmineHTML() {
						$html = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n \"http://www.w3.org/TR/html4/loose.dtd\">\n <html>\n <head>\n <title>Jasmine Spec Runner</title>\n \n <link rel=\"shortcut icon\" type=\"image/png\" href=\"../lib/jasmine-1.3.1/jasmine_favicon.png\">\n <link rel=\"stylesheet\" type=\"text/css\" href=\"../lib/jasmine-1.3.1/jasmine.css\">\n <script type=\"text/javascript\" src=\"../lib/jasmine-1.3.1/jasmine.js\"></script>\n <script type=\"text/javascript\" src=\"../lib/jasmine-1.3.1/jasmine-html.js\"></script>\n \n <!-- include source files here... \n <script type=\"text/javascript\" src=\"../src/Player.js\"></script>\n <script type=\"text/javascript\" src=\"../src/Song.js\"></script>-->\n \n <!-- include spec files here... \n <script type=\"text/javascript\" src=\"spec/SpecHelper.js\"></script>\n <script type=\"text/javascript\" src=\"spec/PlayerSpec.js\"></script>-->\n \n <script type=\"text/javascript\">\n (function() {\n var jasmineEnv = jasmine.getEnv();\n jasmineEnv.updateInterval = 1000;\n \n var htmlReporter = new jasmine.HtmlReporter();\n \n jasmineEnv.addReporter(htmlReporter);\n \n jasmineEnv.specFilter = function(spec) {\n return htmlReporter.specFilter(spec);\n };\n \n var currentWindowOnload = window.onload;\n \n window.onload = function() {\n if (currentWindowOnload) {\n currentWindowOnload();\n }\n execJasmine();\n };\n \n function execJasmine() {\n jasmineEnv.execute();\n }\n \n })();\n </script>\n \n </head> \n <body>\n </body>\n </html> ";
						$this -> makeFile("jasmine/specRunner.html", $html);
					}

					public function makeJasmineCSS() {
						$style = "body { background-color: #eeeeee; padding: 0; margin: 5px; overflow-y: scroll; }\n\n#HTMLReporter { font-size: 11px; font-family: Monaco, \"Lucida Console\", monospace; line-height: 14px; color: #333333; }\n#HTMLReporter a { text-decoration: none; }\n#HTMLReporter a:hover { text-decoration: underline; }\n#HTMLReporter p, #HTMLReporter h1, #HTMLReporter h2, #HTMLReporter h3, #HTMLReporter h4, #HTMLReporter h5, #HTMLReporter h6 { margin: 0; line-height: 14px; }\n#HTMLReporter .banner, #HTMLReporter .symbolSummary, #HTMLReporter .summary, #HTMLReporter .resultMessage, #HTMLReporter .specDetail .description, #HTMLReporter .alert .bar, #HTMLReporter .stackTrace { padding-left: 9px; padding-right: 9px; }\n#HTMLReporter #jasmine_content { position: fixed; right: 100%; }\n#HTMLReporter .version { color: #aaaaaa; }\n#HTMLReporter .banner { margin-top: 14px; }\n#HTMLReporter .duration { color: #aaaaaa; float: right; }\n#HTMLReporter .symbolSummary { overflow: hidden; *zoom: 1; margin: 14px 0; }\n#HTMLReporter .symbolSummary li { display: block; float: left; height: 7px; width: 14px; margin-bottom: 7px; font-size: 16px; }\n#HTMLReporter .symbolSummary li.passed { font-size: 14px; }\n#HTMLReporter .symbolSummary li.passed:before { color: #5e7d00; content: \"\02022\"; }\n#HTMLReporter .symbolSummary li.failed { line-height: 9px; }\n#HTMLReporter .symbolSummary li.failed:before { color: #b03911; content: \"x\"; font-weight: bold; margin-left: -1px; }\n#HTMLReporter .symbolSummary li.skipped { font-size: 14px; }\n#HTMLReporter .symbolSummary li.skipped:before { color: #bababa; content: \"\02022\"; }\n#HTMLReporter .symbolSummary li.pending { line-height: 11px; }\n#HTMLReporter .symbolSummary li.pending:before { color: #aaaaaa; content: \"-\"; }\n#HTMLReporter .exceptions { color: #fff; float: right; margin-top: 5px; margin-right: 5px; }\n#HTMLReporter .bar { line-height: 28px; font-size: 14px; display: block; color: #eee; }\n#HTMLReporter .runningAlert { background-color: #666666; }\n#HTMLReporter .skippedAlert { background-color: #aaaaaa; }\n#HTMLReporter .skippedAlert:first-child { background-color: #333333; }\n#HTMLReporter .skippedAlert:hover { text-decoration: none; color: white; text-decoration: underline; }\n#HTMLReporter .passingAlert { background-color: #a6b779; }\n#HTMLReporter .passingAlert:first-child { background-color: #5e7d00; }\n#HTMLReporter .failingAlert { background-color: #cf867e; }\n#HTMLReporter .failingAlert:first-child { background-color: #b03911; }\n#HTMLReporter .results { margin-top: 14px; }\n#HTMLReporter #details { display: none; }\n#HTMLReporter .resultsMenu, #HTMLReporter .resultsMenu a { background-color: #fff; color: #333333; }\n#HTMLReporter.showDetails .summaryMenuItem { font-weight: normal; text-decoration: inherit; }\n#HTMLReporter.showDetails .summaryMenuItem:hover { text-decoration: underline; }\n#HTMLReporter.showDetails .detailsMenuItem { font-weight: bold; text-decoration: underline; }\n#HTMLReporter.showDetails .summary { display: none; }\n#HTMLReporter.showDetails #details { display: block; }\n#HTMLReporter .summaryMenuItem { font-weight: bold; text-decoration: underline; }\n#HTMLReporter .summary { margin-top: 14px; }\n#HTMLReporter .summary .suite .suite, #HTMLReporter .summary .specSummary { margin-left: 14px; }\n#HTMLReporter .summary .specSummary.passed a { color: #5e7d00; }\n#HTMLReporter .summary .specSummary.failed a { color: #b03911; }\n#HTMLReporter .description + .suite { margin-top: 0; }\n#HTMLReporter .suite { margin-top: 14px; }\n#HTMLReporter .suite a { color: #333333; }\n#HTMLReporter #details .specDetail { margin-bottom: 28px; }\n#HTMLReporter #details .specDetail .description { display: block; color: white; background-color: #b03911; }\n#HTMLReporter .resultMessage { padding-top: 14px; color: #333333; }\n#HTMLReporter .resultMessage span.result { display: block; }\n#HTMLReporter .stackTrace { margin: 5px 0 0 0; max-height: 224px; overflow: auto; line-height: 18px; color: #666666; border: 1px solid #ddd; background: white; white-space: pre; }\n\n#TrivialReporter { padding: 8px 13px; position: absolute; top: 0; bottom: 0; left: 0; right: 0; overflow-y: scroll; background-color: white; font-family: \"Helvetica Neue Light\", \"Lucida Grande\", \"Calibri\", \"Arial\", sans-serif; /*.resultMessage {*/ /*white-space: pre;*/ /*}*/ }\n#TrivialReporter a:visited, #TrivialReporter a { color: #303; }\n#TrivialReporter a:hover, #TrivialReporter a:active { color: blue; }\n#TrivialReporter .run_spec { float: right; padding-right: 5px; font-size: .8em; text-decoration: none; }\n#TrivialReporter .banner { color: #303; background-color: #fef; padding: 5px; }\n#TrivialReporter .logo { float: left; font-size: 1.1em; padding-left: 5px; }\n#TrivialReporter .logo .version { font-size: .6em; padding-left: 1em; }\n#TrivialReporter .runner.running { background-color: yellow; }\n#TrivialReporter .options { text-align: right; font-size: .8em; }\n#TrivialReporter .suite { border: 1px outset gray; margin: 5px 0; padding-left: 1em; }\n#TrivialReporter .suite .suite { margin: 5px; }\n#TrivialReporter .suite.passed { background-color: #dfd; }\n#TrivialReporter .suite.failed { background-color: #fdd; }\n#TrivialReporter .spec { margin: 5px; padding-left: 1em; clear: both; }\n#TrivialReporter .spec.failed, #TrivialReporter .spec.passed, #TrivialReporter .spec.skipped { padding-bottom: 5px; border: 1px solid gray; }\n#TrivialReporter .spec.failed { background-color: #fbb; border-color: red; }\n#TrivialReporter .spec.passed { background-color: #bfb; border-color: green; }\n#TrivialReporter .spec.skipped { background-color: #bbb; }\n#TrivialReporter .messages { border-left: 1px dashed gray; padding-left: 1em; padding-right: 1em; }\n#TrivialReporter .passed { background-color: #cfc; display: none; }\n#TrivialReporter .failed { background-color: #fbb; }\n#TrivialReporter .skipped { color: #777; background-color: #eee; display: none; }\n#TrivialReporter .resultMessage span.result { display: block; line-height: 2em; color: black; }\n#TrivialReporter .resultMessage .mismatch { color: black; }\n#TrivialReporter .stackTrace { white-space: pre; font-size: .8em; margin-left: 10px; max-height: 5em; overflow: auto; border: 1px inset red; padding: 1em; background: #eef; }\n#TrivialReporter .finished-at { padding-left: 1em; font-size: .6em; }\n#TrivialReporter.show-passed .passed, #TrivialReporter.show-skipped .skipped { display: block; }\n#TrivialReporter #jasmine_content { position: fixed; right: 100%; }\n#TrivialReporter .runner { border: 1px solid gray; display: block; margin: 5px 0; padding: 2px 0 2px 10px; }\n";
						$this -> makeFile("lib/jasmine-1.3.1/jasmine.css", $style);
					}

					public function makeJasmineJS() {
						$js = "var isCommonJS = typeof window == \"undefined\" && typeof exports == \"object\"; \n \n/** \n * Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework. \n * \n * @namespace \n */ \nvar jasmine = {}; \nif (isCommonJS) exports.jasmine = jasmine; \n/** \n * @private \n */ \njasmine.unimplementedMethod_ = function() { \n throw new Error(\"unimplemented method\"); \n}; \n \n/** \n * Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just \n * a plain old variable and may be redefined by somebody else. \n * \n * @private \n */ \njasmine.undefined = jasmine.___undefined___; \n \n/** \n * Show diagnostic messages in the console if set to true \n * \n */ \njasmine.VERBOSE = false; \n \n/** \n * Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed. \n * \n */ \njasmine.DEFAULT_UPDATE_INTERVAL = 250; \n \n/** \n * Maximum levels of nesting that will be included when an object is pretty-printed \n */ \njasmine.MAX_PRETTY_PRINT_DEPTH = 40; \n \n/** \n * Default timeout interval in milliseconds for waitsFor() blocks. \n */ \njasmine.DEFAULT_TIMEOUT_INTERVAL = 5000; \n \n/** \n * By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite. \n * Set to false to let the exception bubble up in the browser. \n * \n */ \njasmine.CATCH_EXCEPTIONS = true; \n \njasmine.getGlobal = function() { \n function getGlobal() { \n return this; \n } \n \n return getGlobal(); \n}; \n \n/** \n * Allows for bound functions to be compared. Internal use only. \n * \n * @ignore \n * @private \n * @param base {Object} bound 'this' for the function \n * @param name {Function} function to find \n */ \njasmine.bindOriginal_ = function(base, name) { \n var original = base[name]; \n if (original.apply) { \n return function() { \n return original.apply(base, arguments); \n }; \n } else { \n // IE support \n return jasmine.getGlobal()[name]; \n } \n}; \n \njasmine.setTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'setTimeout'); \njasmine.clearTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearTimeout'); \njasmine.setInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'setInterval'); \njasmine.clearInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearInterval'); \n \njasmine.MessageResult = function(values) { \n this.type = 'log'; \n this.values = values; \n this.trace = new Error(); // todo: test better \n}; \n \njasmine.MessageResult.prototype.toString = function() { \n var text = \"\"; \n for (var i = 0; i < this.values.length; i++) { \n if (i > 0) text += \" \"; \n if (jasmine.isString_(this.values[i])) { \n text += this.values[i]; \n } else { \n text += jasmine.pp(this.values[i]); \n } \n } \n return text; \n}; \n \njasmine.ExpectationResult = function(params) { \n this.type = 'expect'; \n this.matcherName = params.matcherName; \n this.passed_ = params.passed; \n this.expected = params.expected; \n this.actual = params.actual; \n this.message = this.passed_ ? 'Passed.' : params.message; \n \n var trace = (params.trace || new Error(this.message)); \n this.trace = this.passed_ ? '' : trace; \n}; \n \njasmine.ExpectationResult.prototype.toString = function () { \n return this.message; \n}; \n \njasmine.ExpectationResult.prototype.passed = function () { \n return this.passed_; \n}; \n \n/** \n * Getter for the Jasmine environment. Ensures one gets created \n */ \njasmine.getEnv = function() { \n var env = jasmine.currentEnv_ = jasmine.currentEnv_ || new jasmine.Env(); \n return env; \n}; \n \n/** \n * @ignore \n * @private \n * @param value \n * @returns {Boolean} \n */ \njasmine.isArray_ = function(value) { \n return jasmine.isA_(\"Array\", value); \n}; \n \n/** \n * @ignore \n * @private \n * @param value \n * @returns {Boolean} \n */ \njasmine.isString_ = function(value) { \n return jasmine.isA_(\"String\", value); \n}; \n \n/** \n * @ignore \n * @private \n * @param value \n * @returns {Boolean} \n */ \njasmine.isNumber_ = function(value) { \n return jasmine.isA_(\"Number\", value); \n}; \n \n/** \n * @ignore \n * @private \n * @param {String} typeName \n * @param value \n * @returns {Boolean} \n */ \njasmine.isA_ = function(typeName, value) { \n return Object.prototype.toString.apply(value) === '[object ' + typeName + ']'; \n}; \n \n/** \n * Pretty printer for expecations. Takes any object and turns it into a human-readable string. \n * \n * @param value {Object} an object to be outputted \n * @returns {String} \n */ \njasmine.pp = function(value) { \n var stringPrettyPrinter = new jasmine.StringPrettyPrinter(); \n stringPrettyPrinter.format(value); \n return stringPrettyPrinter.string; \n}; \n \n/** \n * Returns true if the object is a DOM Node. \n * \n * @param {Object} obj object to check \n * @returns {Boolean} \n */ \njasmine.isDomNode = function(obj) { \n return obj.nodeType > 0; \n}; \n \n/** \n * Returns a matchable 'generic' object of the class type. For use in expecations of type when values don't matter. \n * \n * @example \n * // don't care about which function is passed in, as long as it's a function \n * expect(mySpy).toHaveBeenCalledWith(jasmine.any(Function)); \n * \n * @param {Class} clazz \n * @returns matchable object of the type clazz \n */ \njasmine.any = function(clazz) { \n return new jasmine.Matchers.Any(clazz); \n}; \n \n/** \n * Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the \n * attributes on the object. \n * \n * @example \n * // don't care about any other attributes than foo. \n * expect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"}); \n * \n * @param sample {Object} sample \n * @returns matchable object for the sample \n */ \njasmine.objectContaining = function (sample) { \n return new jasmine.Matchers.ObjectContaining(sample); \n}; \n \n/** \n * Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks. \n * \n * Spies should be created in test setup, before expectations. They can then be checked, using the standard Jasmine \n * expectation syntax. Spies can be checked if they were called or not and what the calling params were. \n * \n * A Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs). \n * \n * Spies are torn down at the end of every spec. \n * \n * Note: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj. \n * \n * @example \n * // a stub \n * var myStub = jasmine.createSpy('myStub'); // can be used anywhere \n * \n * // spy example \n * var foo = { \n * not: function(bool) { return !bool; } \n * } \n * \n * // actual foo.not will not be called, execution stops \n * spyOn(foo, 'not'); \n \n // foo.not spied upon, execution will continue to implementation \n * spyOn(foo, 'not').andCallThrough(); \n * \n * // fake example \n * var foo = { \n * not: function(bool) { return !bool; } \n * } \n * \n * // foo.not(val) will return val \n * spyOn(foo, 'not').andCallFake(function(value) {return value;}); \n * \n * // mock example \n * foo.not(7 == 7); \n * expect(foo.not).toHaveBeenCalled(); \n * expect(foo.not).toHaveBeenCalledWith(true); \n * \n * @constructor \n * @see spyOn, jasmine.createSpy, jasmine.createSpyObj \n * @param {String} name \n */ \njasmine.Spy = function(name) { \n /** \n * The name of the spy, if provided. \n */ \n this.identity = name || 'unknown'; \n /** \n * Is this Object a spy? \n */ \n this.isSpy = true; \n /** \n * The actual function this spy stubs. \n */ \n this.plan = function() { \n }; \n /** \n * Tracking of the most recent call to the spy. \n * @example \n * var mySpy = jasmine.createSpy('foo'); \n * mySpy(1, 2); \n * mySpy.mostRecentCall.args = [1, 2]; \n */ \n this.mostRecentCall = {}; \n \n /** \n * Holds arguments for each call to the spy, indexed by call count \n * @example \n * var mySpy = jasmine.createSpy('foo'); \n * mySpy(1, 2); \n * mySpy(7, 8); \n * mySpy.mostRecentCall.args = [7, 8]; \n * mySpy.argsForCall[0] = [1, 2]; \n * mySpy.argsForCall[1] = [7, 8]; \n */ \n this.argsForCall = []; \n this.calls = []; \n}; \n \n/** \n * Tells a spy to call through to the actual implemenatation. \n * \n * @example \n * var foo = { \n * bar: function() { // do some stuff } \n * } \n * \n * // defining a spy on an existing property: foo.bar \n * spyOn(foo, 'bar').andCallThrough(); \n */ \njasmine.Spy.prototype.andCallThrough = function() { \n this.plan = this.originalValue; \n return this; \n}; \n \n/** \n * For setting the return value of a spy. \n * \n * @example \n * // defining a spy from scratch: foo() returns 'baz' \n * var foo = jasmine.createSpy('spy on foo').andReturn('baz'); \n * \n * // defining a spy on an existing property: foo.bar() returns 'baz' \n * spyOn(foo, 'bar').andReturn('baz'); \n * \n * @param {Object} value \n */ \njasmine.Spy.prototype.andReturn = function(value) { \n this.plan = function() { \n return value; \n }; \n return this; \n}; \n \n/** \n * For throwing an exception when a spy is called. \n * \n * @example \n * // defining a spy from scratch: foo() throws an exception w/ message 'ouch' \n * var foo = jasmine.createSpy('spy on foo').andThrow('baz'); \n * \n * // defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch' \n * spyOn(foo, 'bar').andThrow('baz'); \n * \n * @param {String} exceptionMsg \n */ \njasmine.Spy.prototype.andThrow = function(exceptionMsg) { \n this.plan = function() { \n throw exceptionMsg; \n }; \n return this; \n}; \n \n/** \n * Calls an alternate implementation when a spy is called. \n * \n * @example \n * var baz = function() { \n * // do some stuff, return something \n * } \n * // defining a spy from scratch: foo() calls the function baz \n * var foo = jasmine.createSpy('spy on foo').andCall(baz); \n * \n * // defining a spy on an existing property: foo.bar() calls an anonymnous function \n * spyOn(foo, 'bar').andCall(function() { return 'baz';} ); \n * \n * @param {Function} fakeFunc \n */ \njasmine.Spy.prototype.andCallFake = function(fakeFunc) { \n this.plan = fakeFunc; \n return this; \n}; \n \n/** \n * Resets all of a spy's the tracking variables so that it can be used again. \n * \n * @example \n * spyOn(foo, 'bar'); \n * \n * foo.bar(); \n * \n * expect(foo.bar.callCount).toEqual(1); \n * \n * foo.bar.reset(); \n * \n * expect(foo.bar.callCount).toEqual(0); \n */ \njasmine.Spy.prototype.reset = function() { \n this.wasCalled = false; \n this.callCount = 0; \n this.argsForCall = []; \n this.calls = []; \n this.mostRecentCall = {}; \n}; \n \njasmine.createSpy = function(name) { \n \n var spyObj = function() { \n spyObj.wasCalled = true; \n spyObj.callCount++; \n var args = jasmine.util.argsToArray(arguments); \n spyObj.mostRecentCall.object = this; \n spyObj.mostRecentCall.args = args; \n spyObj.argsForCall.push(args); \n spyObj.calls.push({object: this, args: args}); \n return spyObj.plan.apply(this, arguments); \n }; \n \n var spy = new jasmine.Spy(name); \n \n for (var prop in spy) { \n spyObj[prop] = spy[prop]; \n } \n \n spyObj.reset(); \n \n return spyObj; \n}; \n \n/** \n * Determines whether an object is a spy. \n * \n * @param {jasmine.Spy|Object} putativeSpy \n * @returns {Boolean} \n */ \njasmine.isSpy = function(putativeSpy) { \n return putativeSpy && putativeSpy.isSpy; \n}; \n \n/** \n * Creates a more complicated spy: an Object that has every property a function that is a spy. Used for stubbing something \n * large in one call. \n * \n * @param {String} baseName name of spy class \n * @param {Array} methodNames array of names of methods to make spies \n */ \njasmine.createSpyObj = function(baseName, methodNames) { \n if (!jasmine.isArray_(methodNames) || methodNames.length === 0) { \n throw new Error('createSpyObj requires a non-empty array of method names to create spies for'); \n } \n var obj = {}; \n for (var i = 0; i < methodNames.length; i++) { \n obj[methodNames[i]] = jasmine.createSpy(baseName + '.' + methodNames[i]); \n } \n return obj; \n}; \n \n/** \n * All parameters are pretty-printed and concatenated together, then written to the current spec's output. \n * \n * Be careful not to leave calls to <code>jasmine.log</code> in production code. \n */ \njasmine.log = function() { \n var spec = jasmine.getEnv().currentSpec; \n spec.log.apply(spec, arguments); \n}; \n \n/** \n * Function that installs a spy on an existing object's method name. Used within a Spec to create a spy. \n * \n * @example \n * // spy example \n * var foo = { \n * not: function(bool) { return !bool; } \n * } \n * spyOn(foo, 'not'); // actual foo.not will not be called, execution stops \n * \n * @see jasmine.createSpy \n * @param obj \n * @param methodName \n * @return {jasmine.Spy} a Jasmine spy that can be chained with all spy methods \n */ \nvar spyOn = function(obj, methodName) { \n return jasmine.getEnv().currentSpec.spyOn(obj, methodName); \n}; \nif (isCommonJS) exports.spyOn = spyOn; \n \n/** \n * Creates a Jasmine spec that will be added to the current suite. \n * \n * // TODO: pending tests \n * \n * @example \n * it('should be true', function() { \n * expect(true).toEqual(true); \n * }); \n * \n * @param {String} desc description of this specification \n * @param {Function} func defines the preconditions and expectations of the spec \n */ \nvar it = function(desc, func) { \n return jasmine.getEnv().it(desc, func); \n}; \nif (isCommonJS) exports.it = it; \n \n/** \n * Creates a <em>disabled</em> Jasmine spec. \n * \n * A convenience method that allows existing specs to be disabled temporarily during development. \n * \n * @param {String} desc description of this specification \n * @param {Function} func defines the preconditions and expectations of the spec \n */ \nvar xit = function(desc, func) { \n return jasmine.getEnv().xit(desc, func); \n}; \nif (isCommonJS) exports.xit = xit; \n \n/** \n * Starts a chain for a Jasmine expectation. \n * \n * It is passed an Object that is the actual value and should chain to one of the many \n * jasmine.Matchers functions. \n * \n * @param {Object} actual Actual value to test against and expected value \n * @return {jasmine.Matchers} \n */ \nvar expect = function(actual) { \n return jasmine.getEnv().currentSpec.expect(actual); \n}; \nif (isCommonJS) exports.expect = expect; \n \n/** \n * Defines part of a jasmine spec. Used in cominbination with waits or waitsFor in asynchrnous specs. \n * \n * @param {Function} func Function that defines part of a jasmine spec. \n */ \nvar runs = function(func) { \n jasmine.getEnv().currentSpec.runs(func); \n}; \nif (isCommonJS) exports.runs = runs; \n \n/** \n * Waits a fixed time period before moving to the next block. \n * \n * @deprecated Use waitsFor() instead \n * @param {Number} timeout milliseconds to wait \n */ \nvar waits = function(timeout) { \n jasmine.getEnv().currentSpec.waits(timeout); \n}; \nif (isCommonJS) exports.waits = waits; \n \n/** \n * Waits for the latchFunction to return true before proceeding to the next block. \n * \n * @param {Function} latchFunction \n * @param {String} optional_timeoutMessage \n * @param {Number} optional_timeout \n */ \nvar waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) { \n jasmine.getEnv().currentSpec.waitsFor.apply(jasmine.getEnv().currentSpec, arguments); \n}; \nif (isCommonJS) exports.waitsFor = waitsFor; \n \n/** \n * A function that is called before each spec in a suite. \n * \n * Used for spec setup, including validating assumptions. \n * \n * @param {Function} beforeEachFunction \n */ \nvar beforeEach = function(beforeEachFunction) { \n jasmine.getEnv().beforeEach(beforeEachFunction); \n}; \nif (isCommonJS) exports.beforeEach = beforeEach; \n \n/** \n * A function that is called after each spec in a suite. \n * \n * Used for restoring any state that is hijacked during spec execution. \n * \n * @param {Function} afterEachFunction \n */ \nvar afterEach = function(afterEachFunction) { \n jasmine.getEnv().afterEach(afterEachFunction); \n}; \nif (isCommonJS) exports.afterEach = afterEach; \n \n/** \n * Defines a suite of specifications. \n * \n * Stores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared \n * are accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization \n * of setup in some tests. \n * \n * @example \n * // TODO: a simple suite \n * \n * // TODO: a simple suite with a nested describe block \n * \n * @param {String} description A string, usually the class under test. \n * @param {Function} specDefinitions function that defines several specs. \n */ \nvar describe = function(description, specDefinitions) { \n return jasmine.getEnv().describe(description, specDefinitions); \n}; \nif (isCommonJS) exports.describe = describe; \n \n/** \n * Disables a suite of specifications. Used to disable some suites in a file, or files, temporarily during development. \n * \n * @param {String} description A string, usually the class under test. \n * @param {Function} specDefinitions function that defines several specs. \n */ \nvar xdescribe = function(description, specDefinitions) { \n return jasmine.getEnv().xdescribe(description, specDefinitions); \n}; \nif (isCommonJS) exports.xdescribe = xdescribe; \n \n \n// Provide the XMLHttpRequest class for IE 5.x-6.x: \njasmine.XmlHttpRequest = (typeof XMLHttpRequest == \"undefined\") ? function() { \n function tryIt(f) { \n try { \n return f(); \n } catch(e) { \n } \n return null; \n } \n \n var xhr = tryIt(function() { \n return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\"); \n }) || \n tryIt(function() { \n return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\"); \n }) || \n tryIt(function() { \n return new ActiveXObject(\"Msxml2.XMLHTTP\"); \n }) || \n tryIt(function() { \n return new ActiveXObject(\"Microsoft.XMLHTTP\"); \n }); \n \n if (!xhr) throw new Error(\"This browser does not support XMLHttpRequest.\"); \n \n return xhr; \n} : XMLHttpRequest; \n/** \n * @namespace \n */ \njasmine.util = {}; \n \n/** \n * Declare that a child class inherit it's prototype from the parent class. \n * \n * @private \n * @param {Function} childClass \n * @param {Function} parentClass \n */ \njasmine.util.inherit = function(childClass, parentClass) { \n /** \n * @private \n */ \n var subclass = function() { \n }; \n subclass.prototype = parentClass.prototype; \n childClass.prototype = new subclass(); \n}; \n \njasmine.util.formatException = function(e) { \n var lineNumber; \n if (e.line) { \n lineNumber = e.line; \n } \n else if (e.lineNumber) { \n lineNumber = e.lineNumber; \n } \n \n var file; \n \n if (e.sourceURL) { \n file = e.sourceURL; \n } \n else if (e.fileName) { \n file = e.fileName; \n } \n \n var message = (e.name && e.message) ? (e.name + ': ' + e.message) : e.toString(); \n \n if (file && lineNumber) { \n message += ' in ' + file + ' (line ' + lineNumber + ')'; \n } \n \n return message; \n}; \n \njasmine.util.htmlEscape = function(str) { \n if (!str) return str; \n return str.replace(/&/g, '&amp;') \n .replace(/</g, '&lt;') \n .replace(/>/g, '&gt;'); \n}; \n \njasmine.util.argsToArray = function(args) { \n var arrayOfArgs = []; \n for (var i = 0; i < args.length; i++) arrayOfArgs.push(args[i]); \n return arrayOfArgs; \n}; \n \njasmine.util.extend = function(destination, source) { \n for (var property in source) destination[property] = source[property]; \n return destination; \n}; \n \n/** \n * Environment for Jasmine \n * \n * @constructor \n */ \njasmine.Env = function() { \n this.currentSpec = null; \n this.currentSuite = null; \n this.currentRunner_ = new jasmine.Runner(this); \n \n this.reporter = new jasmine.MultiReporter(); \n \n this.updateInterval = jasmine.DEFAULT_UPDATE_INTERVAL; \n this.defaultTimeoutInterval = jasmine.DEFAULT_TIMEOUT_INTERVAL; \n this.lastUpdate = 0; \n this.specFilter = function() { \n return true; \n }; \n \n this.nextSpecId_ = 0; \n this.nextSuiteId_ = 0; \n this.equalityTesters_ = []; \n \n // wrap matchers \n this.matchersClass = function() { \n jasmine.Matchers.apply(this, arguments); \n }; \n jasmine.util.inherit(this.matchersClass, jasmine.Matchers); \n \n jasmine.Matchers.wrapInto_(jasmine.Matchers.prototype, this.matchersClass); \n}; \n \n \njasmine.Env.prototype.setTimeout = jasmine.setTimeout; \njasmine.Env.prototype.clearTimeout = jasmine.clearTimeout; \njasmine.Env.prototype.setInterval = jasmine.setInterval; \njasmine.Env.prototype.clearInterval = jasmine.clearInterval; \n \n/** \n * @returns an object containing jasmine version build info, if set. \n */ \njasmine.Env.prototype.version = function () { \n if (jasmine.version_) { \n return jasmine.version_; \n } else { \n throw new Error('Version not set'); \n } \n}; \n \n/** \n * @returns string containing jasmine version build info, if set. \n */ \njasmine.Env.prototype.versionString = function() { \n if (!jasmine.version_) { \n return \"version unknown\"; \n } \n \n var version = this.version(); \n var versionString = version.major + \".\" + version.minor + \".\" + version.build; \n if (version.release_candidate) { \n versionString += \".rc\" + version.release_candidate; \n } \n versionString += \" revision \" + version.revision; \n return versionString; \n}; \n \n/** \n * @returns a sequential integer starting at 0 \n */ \njasmine.Env.prototype.nextSpecId = function () { \n return this.nextSpecId_++; \n}; \n \n/** \n * @returns a sequential integer starting at 0 \n */ \njasmine.Env.prototype.nextSuiteId = function () { \n return this.nextSuiteId_++; \n}; \n \n/** \n * Register a reporter to receive status updates from Jasmine. \n * @param {jasmine.Reporter} reporter An object which will receive status updates. \n */ \njasmine.Env.prototype.addReporter = function(reporter) { \n this.reporter.addReporter(reporter); \n}; \n \njasmine.Env.prototype.execute = function() { \n this.currentRunner_.execute(); \n}; \n \njasmine.Env.prototype.describe = function(description, specDefinitions) { \n var suite = new jasmine.Suite(this, description, specDefinitions, this.currentSuite); \n \n var parentSuite = this.currentSuite; \n if (parentSuite) { \n parentSuite.add(suite); \n } else { \n this.currentRunner_.add(suite); \n } \n \n this.currentSuite = suite; \n \n var declarationError = null; \n try { \n specDefinitions.call(suite); \n } catch(e) { \n declarationError = e; \n } \n \n if (declarationError) { \n this.it(\"encountered a declaration exception\", function() { \n throw declarationError; \n }); \n } \n \n this.currentSuite = parentSuite; \n \n return suite; \n}; \n \njasmine.Env.prototype.beforeEach = function(beforeEachFunction) { \n if (this.currentSuite) { \n this.currentSuite.beforeEach(beforeEachFunction); \n } else { \n this.currentRunner_.beforeEach(beforeEachFunction); \n } \n}; \n \njasmine.Env.prototype.currentRunner = function () { \n return this.currentRunner_; \n}; \n \njasmine.Env.prototype.afterEach = function(afterEachFunction) { \n if (this.currentSuite) { \n this.currentSuite.afterEach(afterEachFunction); \n } else { \n this.currentRunner_.afterEach(afterEachFunction); \n } \n \n}; \n \njasmine.Env.prototype.xdescribe = function(desc, specDefinitions) { \n return { \n execute: function() { \n } \n }; \n}; \n \njasmine.Env.prototype.it = function(description, func) { \n var spec = new jasmine.Spec(this, this.currentSuite, description); \n this.currentSuite.add(spec); \n this.currentSpec = spec; \n \n if (func) { \n spec.runs(func); \n } \n \n return spec; \n}; \n \njasmine.Env.prototype.xit = function(desc, func) { \n return { \n id: this.nextSpecId(), \n runs: function() { \n } \n }; \n}; \n \njasmine.Env.prototype.compareRegExps_ = function(a, b, mismatchKeys, mismatchValues) { \n if (a.source != b.source) \n mismatchValues.push(\"expected pattern /\" + b.source + \"/ is not equal to the pattern /\" + a.source + \"/\"); \n \n if (a.ignoreCase != b.ignoreCase) \n mismatchValues.push(\"expected modifier i was\" + (b.ignoreCase ? \" \" : \" not \") + \"set and does not equal the origin modifier\"); \n \n if (a.global != b.global) \n mismatchValues.push(\"expected modifier g was\" + (b.global ? \" \" : \" not \") + \"set and does not equal the origin modifier\"); \n \n if (a.multiline != b.multiline) \n mismatchValues.push(\"expected modifier m was\" + (b.multiline ? \" \" : \" not \") + \"set and does not equal the origin modifier\"); \n \n if (a.sticky != b.sticky) \n mismatchValues.push(\"expected modifier y was\" + (b.sticky ? \" \" : \" not \") + \"set and does not equal the origin modifier\"); \n \n return (mismatchValues.length === 0); \n}; \n \njasmine.Env.prototype.compareObjects_ = function(a, b, mismatchKeys, mismatchValues) { \n if (a.__Jasmine_been_here_before__ === b && b.__Jasmine_been_here_before__ === a) { \n return true; \n } \n \n a.__Jasmine_been_here_before__ = b; \n b.__Jasmine_been_here_before__ = a; \n \n var hasKey = function(obj, keyName) { \n return obj !== null && obj[keyName] !== jasmine.undefined; \n }; \n \n for (var property in b) { \n if (!hasKey(a, property) && hasKey(b, property)) { \n mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\"); \n } \n } \n for (property in a) { \n if (!hasKey(b, property) && hasKey(a, property)) { \n mismatchKeys.push(\"expected missing key '\" + property + \"', but present in actual.\"); \n } \n } \n for (property in b) { \n if (property == '__Jasmine_been_here_before__') continue; \n if (!this.equals_(a[property], b[property], mismatchKeys, mismatchValues)) { \n mismatchValues.push(\"'\" + property + \"' was '\" + (b[property] ? jasmine.util.htmlEscape(b[property].toString()) : b[property]) + \"' in expected, but was '\" + (a[property] ? jasmine.util.htmlEscape(a[property].toString()) : a[property]) + \"' in actual.\"); \n } \n } \n \n if (jasmine.isArray_(a) && jasmine.isArray_(b) && a.length != b.length) { \n mismatchValues.push(\"arrays were not the same length\"); \n } \n \n delete a.__Jasmine_been_here_before__; \n delete b.__Jasmine_been_here_before__; \n return (mismatchKeys.length === 0 && mismatchValues.length === 0); \n}; \n \njasmine.Env.prototype.equals_ = function(a, b, mismatchKeys, mismatchValues) { \n mismatchKeys = mismatchKeys || []; \n mismatchValues = mismatchValues || []; \n \n for (var i = 0; i < this.equalityTesters_.length; i++) { \n var equalityTester = this.equalityTesters_[i]; \n var result = equalityTester(a, b, this, mismatchKeys, mismatchValues); \n if (result !== jasmine.undefined) return result; \n } \n \n if (a === b) return true; \n \n if (a === jasmine.undefined || a === null || b === jasmine.undefined || b === null) { \n return (a == jasmine.undefined && b == jasmine.undefined); \n } \n \n if (jasmine.isDomNode(a) && jasmine.isDomNode(b)) { \n return a === b; \n } \n \n if (a instanceof Date && b instanceof Date) { \n return a.getTime() == b.getTime(); \n } \n \n if (a.jasmineMatches) { \n return a.jasmineMatches(b); \n } \n \n if (b.jasmineMatches) { \n return b.jasmineMatches(a); \n } \n \n if (a instanceof jasmine.Matchers.ObjectContaining) { \n return a.matches(b); \n } \n \n if (b instanceof jasmine.Matchers.ObjectContaining) { \n return b.matches(a); \n } \n \n if (jasmine.isString_(a) && jasmine.isString_(b)) { \n return (a == b); \n } \n \n if (jasmine.isNumber_(a) && jasmine.isNumber_(b)) { \n return (a == b); \n } \n \n if (a instanceof RegExp && b instanceof RegExp) { \n return this.compareRegExps_(a, b, mismatchKeys, mismatchValues); \n } \n \n if (typeof a === \"object\" && typeof b === \"object\") { \n return this.compareObjects_(a, b, mismatchKeys, mismatchValues); \n } \n \n //Straight check \n return (a === b); \n}; \n \njasmine.Env.prototype.contains_ = function(haystack, needle) { \n if (jasmine.isArray_(haystack)) { \n for (var i = 0; i < haystack.length; i++) { \n if (this.equals_(haystack[i], needle)) return true; \n } \n return false; \n } \n return haystack.indexOf(needle) >= 0; \n}; \n \njasmine.Env.prototype.addEqualityTester = function(equalityTester) { \n this.equalityTesters_.push(equalityTester); \n}; \n/** No-op base class for Jasmine reporters. \n * \n * @constructor \n */ \njasmine.Reporter = function() { \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.Reporter.prototype.reportRunnerStarting = function(runner) { \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.Reporter.prototype.reportRunnerResults = function(runner) { \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.Reporter.prototype.reportSuiteResults = function(suite) { \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.Reporter.prototype.reportSpecStarting = function(spec) { \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.Reporter.prototype.reportSpecResults = function(spec) { \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.Reporter.prototype.log = function(str) { \n}; \n \n/** \n * Blocks are functions with executable code that make up a spec. \n * \n * @constructor \n * @param {jasmine.Env} env \n * @param {Function} func \n * @param {jasmine.Spec} spec \n */ \njasmine.Block = function(env, func, spec) { \n this.env = env; \n this.func = func; \n this.spec = spec; \n}; \n \njasmine.Block.prototype.execute = function(onComplete) { \n if (!jasmine.CATCH_EXCEPTIONS) { \n this.func.apply(this.spec); \n } \n else { \n try { \n this.func.apply(this.spec); \n } catch (e) { \n this.spec.fail(e); \n } \n } \n onComplete(); \n}; \n/** JavaScript API reporter. \n * \n * @constructor \n */ \njasmine.JsApiReporter = function() { \n this.started = false; \n this.finished = false; \n this.suites_ = []; \n this.results_ = {}; \n}; \n \njasmine.JsApiReporter.prototype.reportRunnerStarting = function(runner) { \n this.started = true; \n var suites = runner.topLevelSuites(); \n for (var i = 0; i < suites.length; i++) { \n var suite = suites[i]; \n this.suites_.push(this.summarize_(suite)); \n } \n}; \n \njasmine.JsApiReporter.prototype.suites = function() { \n return this.suites_; \n}; \n \njasmine.JsApiReporter.prototype.summarize_ = function(suiteOrSpec) { \n var isSuite = suiteOrSpec instanceof jasmine.Suite; \n var summary = { \n id: suiteOrSpec.id, \n name: suiteOrSpec.description, \n type: isSuite ? 'suite' : 'spec', \n children: [] \n }; \n \n if (isSuite) { \n var children = suiteOrSpec.children(); \n for (var i = 0; i < children.length; i++) { \n summary.children.push(this.summarize_(children[i])); \n } \n } \n return summary; \n}; \n \njasmine.JsApiReporter.prototype.results = function() { \n return this.results_; \n}; \n \njasmine.JsApiReporter.prototype.resultsForSpec = function(specId) { \n return this.results_[specId]; \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.JsApiReporter.prototype.reportRunnerResults = function(runner) { \n this.finished = true; \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.JsApiReporter.prototype.reportSuiteResults = function(suite) { \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.JsApiReporter.prototype.reportSpecResults = function(spec) { \n this.results_[spec.id] = { \n messages: spec.results().getItems(), \n result: spec.results().failedCount > 0 ? \"failed\" : \"passed\" \n }; \n}; \n \n//noinspection JSUnusedLocalSymbols \njasmine.JsApiReporter.prototype.log = function(str) { \n}; \n \njasmine.JsApiReporter.prototype.resultsForSpecs = function(specIds){ \n var results = {}; \n for (var i = 0; i < specIds.length; i++) { \n var specId = specIds[i]; \n results[specId] = this.summarizeResult_(this.results_[specId]); \n } \n return results; \n}; \n \njasmine.JsApiReporter.prototype.summarizeResult_ = function(result){ \n var summaryMessages = []; \n var messagesLength = result.messages.length; \n for (var messageIndex = 0; messageIndex < messagesLength; messageIndex++) { \n var resultMessage = result.messages[messageIndex]; \n summaryMessages.push({ \n text: resultMessage.type == 'log' ? resultMessage.toString() : jasmine.undefined, \n passed: resultMessage.passed ? resultMessage.passed() : true, \n type: resultMessage.type, \n message: resultMessage.message, \n trace: { \n stack: resultMessage.passed && !resultMessage.passed() ? resultMessage.trace.stack : jasmine.undefined \n } \n }); \n } \n \n return { \n result : result.result, \n messages : summaryMessages \n }; \n}; \n \n/** \n * @constructor \n * @param {jasmine.Env} env \n * @param actual \n * @param {jasmine.Spec} spec \n */ \njasmine.Matchers = function(env, actual, spec, opt_isNot) { \n this.env = env; \n this.actual = actual; \n this.spec = spec; \n this.isNot = opt_isNot || false; \n this.reportWasCalled_ = false; \n}; \n \n// todo: @deprecated as of Jasmine 0.11, remove soon [xw] \njasmine.Matchers.pp = function(str) { \n throw new Error(\"jasmine.Matchers.pp() is no longer supported, please use jasmine.pp() instead!\"); \n}; \n \n// todo: @deprecated Deprecated as of Jasmine 0.10. Rewrite your custom matchers to return true or false. [xw] \njasmine.Matchers.prototype.report = function(result, failing_message, details) { \n throw new Error(\"As of jasmine 0.11, custom matchers must be implemented differently -- please see jasmine docs\"); \n}; \n \njasmine.Matchers.wrapInto_ = function(prototype, matchersClass) { \n for (var methodName in prototype) { \n if (methodName == 'report') continue; \n var orig = prototype[methodName]; \n matchersClass.prototype[methodName] = jasmine.Matchers.matcherFn_(methodName, orig); \n } \n}; \n \njasmine.Matchers.matcherFn_ = function(matcherName, matcherFunction) { \n return function() { \n var matcherArgs = jasmine.util.argsToArray(arguments); \n var result = matcherFunction.apply(this, arguments); \n \n if (this.isNot) { \n result = !result; \n } \n \n if (this.reportWasCalled_) return result; \n \n var message; \n if (!result) { \n if (this.message) { \n message = this.message.apply(this, arguments); \n if (jasmine.isArray_(message)) { \n message = message[this.isNot ? 1 : 0]; \n } \n } else { \n var englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); }); \n message = \"Expected \" + jasmine.pp(this.actual) + (this.isNot ? \" not \" : \" \") + englishyPredicate; \n if (matcherArgs.length > 0) { \n for (var i = 0; i < matcherArgs.length; i++) { \n if (i > 0) message += \",\"; \n message += \" \" + jasmine.pp(matcherArgs[i]); \n } \n } \n message += \".\"; \n } \n } \n var expectationResult = new jasmine.ExpectationResult({ \n matcherName: matcherName, \n passed: result, \n expected: matcherArgs.length > 1 ? matcherArgs : matcherArgs[0], \n actual: this.actual, \n message: message \n }); \n this.spec.addMatcherResult(expectationResult); \n return jasmine.undefined; \n }; \n}; \n \n \n \n \n/** \n * toBe: compares the actual to the expected using === \n * @param expected \n */ \njasmine.Matchers.prototype.toBe = function(expected) { \n return this.actual === expected; \n}; \n \n/** \n * toNotBe: compares the actual to the expected using !== \n * @param expected \n * @deprecated as of 1.0. Use not.toBe() instead. \n */ \njasmine.Matchers.prototype.toNotBe = function(expected) { \n return this.actual !== expected; \n}; \n \n/** \n * toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc. \n * \n * @param expected \n */ \njasmine.Matchers.prototype.toEqual = function(expected) { \n return this.env.equals_(this.actual, expected); \n}; \n \n/** \n * toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual \n * @param expected \n * @deprecated as of 1.0. Use not.toEqual() instead. \n */ \njasmine.Matchers.prototype.toNotEqual = function(expected) { \n return !this.env.equals_(this.actual, expected); \n}; \n \n/** \n * Matcher that compares the actual to the expected using a regular expression. Constructs a RegExp, so takes \n * a pattern or a String. \n * \n * @param expected \n */ \njasmine.Matchers.prototype.toMatch = function(expected) { \n return new RegExp(expected).test(this.actual); \n}; \n \n/** \n * Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch \n * @param expected \n * @deprecated as of 1.0. Use not.toMatch() instead. \n */ \njasmine.Matchers.prototype.toNotMatch = function(expected) { \n return !(new RegExp(expected).test(this.actual)); \n}; \n \n/** \n * Matcher that compares the actual to jasmine.undefined. \n */ \njasmine.Matchers.prototype.toBeDefined = function() { \n return (this.actual !== jasmine.undefined); \n}; \n \n/** \n * Matcher that compares the actual to jasmine.undefined. \n */ \njasmine.Matchers.prototype.toBeUndefined = function() { \n return (this.actual === jasmine.undefined); \n}; \n \n/** \n * Matcher that compares the actual to null. \n */ \njasmine.Matchers.prototype.toBeNull = function() { \n return (this.actual === null); \n}; \n \n/** \n * Matcher that compares the actual to NaN. \n */ \njasmine.Matchers.prototype.toBeNaN = function() { \n this.message = function() { \n return [ \"Expected \" + jasmine.pp(this.actual) + \" to be NaN.\" ]; \n }; \n \n return (this.actual !== this.actual); \n}; \n \n/** \n * Matcher that boolean not-nots the actual. \n */ \njasmine.Matchers.prototype.toBeTruthy = function() { \n return !!this.actual; \n}; \n \n \n/** \n * Matcher that boolean nots the actual. \n */ \njasmine.Matchers.prototype.toBeFalsy = function() { \n return !this.actual; \n}; \n \n \n/** \n * Matcher that checks to see if the actual, a Jasmine spy, was called. \n */ \njasmine.Matchers.prototype.toHaveBeenCalled = function() { \n if (arguments.length > 0) { \n throw new Error('toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith'); \n } \n \n if (!jasmine.isSpy(this.actual)) { \n throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.'); \n } \n \n this.message = function() { \n return [ \n \"Expected spy \" + this.actual.identity + \" to have been called.\", \n \"Expected spy \" + this.actual.identity + \" not to have been called.\" \n ]; \n }; \n \n return this.actual.wasCalled; \n}; \n \n/** @deprecated Use expect(xxx).toHaveBeenCalled() instead */ \njasmine.Matchers.prototype.wasCalled = jasmine.Matchers.prototype.toHaveBeenCalled; \n \n/** \n * Matcher that checks to see if the actual, a Jasmine spy, was not called. \n * \n * @deprecated Use expect(xxx).not.toHaveBeenCalled() instead \n */ \njasmine.Matchers.prototype.wasNotCalled = function() { \n if (arguments.length > 0) { \n throw new Error('wasNotCalled does not take arguments'); \n } \n \n if (!jasmine.isSpy(this.actual)) { \n throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.'); \n } \n \n this.message = function() { \n return [ \n \"Expected spy \" + this.actual.identity + \" to not have been called.\", \n \"Expected spy \" + this.actual.identity + \" to have been called.\" \n ]; \n }; \n \n return !this.actual.wasCalled; \n}; \n \n/** \n * Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters. \n * \n * @example \n * \n */ \njasmine.Matchers.prototype.toHaveBeenCalledWith = function() { \n var expectedArgs = jasmine.util.argsToArray(arguments); \n if (!jasmine.isSpy(this.actual)) { \n throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.'); \n } \n this.message = function() { \n var invertedMessage = \"Expected spy \" + this.actual.identity + \" not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was.\"; \n var positiveMessage = \"\"; \n if (this.actual.callCount === 0) { \n positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but it was never called.\"; \n } else { \n positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but actual calls were \" + jasmine.pp(this.actual.argsForCall).replace(/^\[ | \]$/g, '') \n } \n return [positiveMessage, invertedMessage]; \n }; \n \n return this.env.contains_(this.actual.argsForCall, expectedArgs); \n}; \n \n/** @deprecated Use expect(xxx).toHaveBeenCalledWith() instead */ \njasmine.Matchers.prototype.wasCalledWith = jasmine.Matchers.prototype.toHaveBeenCalledWith; \n \n/** @deprecated Use expect(xxx).not.toHaveBeenCalledWith() instead */ \njasmine.Matchers.prototype.wasNotCalledWith = function() { \n var expectedArgs = jasmine.util.argsToArray(arguments); \n if (!jasmine.isSpy(this.actual)) { \n throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.'); \n } \n \n this.message = function() { \n return [ \n \"Expected spy not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\", \n \"Expected spy to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\" \n ]; \n }; \n \n return !this.env.contains_(this.actual.argsForCall, expectedArgs); \n}; \n \n/** \n * Matcher that checks that the expected item is an element in the actual Array. \n * \n * @param {Object} expected \n */ \njasmine.Matchers.prototype.toContain = function(expected) { \n return this.env.contains_(this.actual, expected); \n}; \n \n/** \n * Matcher that checks that the expected item is NOT an element in the actual Array. \n * \n * @param {Object} expected \n * @deprecated as of 1.0. Use not.toContain() instead. \n */ \njasmine.Matchers.prototype.toNotContain = function(expected) { \n return !this.env.contains_(this.actual, expected); \n}; \n \njasmine.Matchers.prototype.toBeLessThan = function(expected) { \n return this.actual < expected; \n}; \n \njasmine.Matchers.prototype.toBeGreaterThan = function(expected) { \n return this.actual > expected; \n}; \n \n/** \n * Matcher that checks that the expected item is equal to the actual item \n * up to a given level of decimal precision (default 2). \n * \n * @param {Number} expected \n * @param {Number} precision, as number of decimal places \n */ \njasmine.Matchers.prototype.toBeCloseTo = function(expected, precision) { \n if (!(precision === 0)) { \n precision = precision || 2; \n } \n return Math.abs(expected - this.actual) < (Math.pow(10, -precision) / 2); \n}; \n \n/** \n * Matcher that checks that the expected exception was thrown by the actual. \n * \n * @param {String} [expected] \n */ \njasmine.Matchers.prototype.toThrow = function(expected) { \n var result = false; \n var exception; \n if (typeof this.actual != 'function') { \n throw new Error('Actual is not a function'); \n } \n try { \n this.actual(); \n } catch (e) { \n exception = e; \n } \n if (exception) { \n result = (expected === jasmine.undefined || this.env.equals_(exception.message || exception, expected.message || expected)); \n } \n \n var not = this.isNot ? \"not \" : \"\"; \n \n this.message = function() { \n if (exception && (expected === jasmine.undefined || !this.env.equals_(exception.message || exception, expected.message || expected))) { \n return [\"Expected function \" + not + \"to throw\", expected ? expected.message || expected : \"an exception\", \", but it threw\", exception.message || exception].join(' '); \n } else { \n return \"Expected function to throw an exception.\"; \n } \n }; \n \n return result; \n}; \n \njasmine.Matchers.Any = function(expectedClass) { \n this.expectedClass = expectedClass; \n}; \n \njasmine.Matchers.Any.prototype.jasmineMatches = function(other) { \n if (this.expectedClass == String) { \n return typeof other == 'string' || other instanceof String; \n } \n \n if (this.expectedClass == Number) { \n return typeof other == 'number' || other instanceof Number; \n } \n \n if (this.expectedClass == Function) { \n return typeof other == 'function' || other instanceof Function; \n } \n \n if (this.expectedClass == Object) { \n return typeof other == 'object'; \n } \n \n return other instanceof this.expectedClass; \n}; \n \njasmine.Matchers.Any.prototype.jasmineToString = function() { \n return '<jasmine.any(' + this.expectedClass + ')>'; \n}; \n \njasmine.Matchers.ObjectContaining = function (sample) { \n this.sample = sample; \n}; \n \njasmine.Matchers.ObjectContaining.prototype.jasmineMatches = function(other, mismatchKeys, mismatchValues) { \n mismatchKeys = mismatchKeys || []; \n mismatchValues = mismatchValues || []; \n \n var env = jasmine.getEnv(); \n \n var hasKey = function(obj, keyName) { \n return obj != null && obj[keyName] !== jasmine.undefined; \n }; \n \n for (var property in this.sample) { \n if (!hasKey(other, property) && hasKey(this.sample, property)) { \n mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\"); \n } \n else if (!env.equals_(this.sample[property], other[property], mismatchKeys, mismatchValues)) { \n mismatchValues.push(\"'\" + property + \"' was '\" + (other[property] ? jasmine.util.htmlEscape(other[property].toString()) : other[property]) + \"' in expected, but was '\" + (this.sample[property] ? jasmine.util.htmlEscape(this.sample[property].toString()) : this.sample[property]) + \"' in actual.\"); \n } \n } \n \n return (mismatchKeys.length === 0 && mismatchValues.length === 0); \n}; \n \njasmine.Matchers.ObjectContaining.prototype.jasmineToString = function () { \n return \"<jasmine.objectContaining(\" + jasmine.pp(this.sample) + \")>\"; \n}; \n// Mock setTimeout, clearTimeout \n// Contributed by Pivotal Computer Systems, www.pivotalsf.com \n \njasmine.FakeTimer = function() { \n this.reset(); \n \n var self = this; \n self.setTimeout = function(funcToCall, millis) { \n self.timeoutsMade++; \n self.scheduleFunction(self.timeoutsMade, funcToCall, millis, false); \n return self.timeoutsMade; \n }; \n \n self.setInterval = function(funcToCall, millis) { \n self.timeoutsMade++; \n self.scheduleFunction(self.timeoutsMade, funcToCall, millis, true); \n return self.timeoutsMade; \n }; \n \n self.clearTimeout = function(timeoutKey) { \n self.scheduledFunctions[timeoutKey] = jasmine.undefined; \n }; \n \n self.clearInterval = function(timeoutKey) { \n self.scheduledFunctions[timeoutKey] = jasmine.undefined; \n }; \n \n}; \n \njasmine.FakeTimer.prototype.reset = function() { \n this.timeoutsMade = 0; \n this.scheduledFunctions = {}; \n this.nowMillis = 0; \n}; \n \njasmine.FakeTimer.prototype.tick = function(millis) { \n var oldMillis = this.nowMillis; \n var newMillis = oldMillis + millis; \n this.runFunctionsWithinRange(oldMillis, newMillis); \n this.nowMillis = newMillis; \n}; \n \njasmine.FakeTimer.prototype.runFunctionsWithinRange = function(oldMillis, nowMillis) { \n var scheduledFunc; \n var funcsToRun = []; \n for (var timeoutKey in this.scheduledFunctions) { \n scheduledFunc = this.scheduledFunctions[timeoutKey]; \n if (scheduledFunc != jasmine.undefined && \n scheduledFunc.runAtMillis >= oldMillis && \n scheduledFunc.runAtMillis <= nowMillis) { \n funcsToRun.push(scheduledFunc); \n this.scheduledFunctions[timeoutKey] = jasmine.undefined; \n } \n } \n \n if (funcsToRun.length > 0) { \n funcsToRun.sort(function(a, b) { \n return a.runAtMillis - b.runAtMillis; \n }); \n for (var i = 0; i < funcsToRun.length; ++i) { \n try { \n var funcToRun = funcsToRun[i]; \n this.nowMillis = funcToRun.runAtMillis; \n funcToRun.funcToCall(); \n if (funcToRun.recurring) { \n this.scheduleFunction(funcToRun.timeoutKey, \n funcToRun.funcToCall, \n funcToRun.millis, \n true); \n } \n } catch(e) { \n } \n } \n this.runFunctionsWithinRange(oldMillis, nowMillis); \n } \n}; \n \njasmine.FakeTimer.prototype.scheduleFunction = function(timeoutKey, funcToCall, millis, recurring) { \n this.scheduledFunctions[timeoutKey] = { \n runAtMillis: this.nowMillis + millis, \n funcToCall: funcToCall, \n recurring: recurring, \n timeoutKey: timeoutKey, \n millis: millis \n }; \n}; \n \n/** \n * @namespace \n */ \njasmine.Clock = { \n defaultFakeTimer: new jasmine.FakeTimer(), \n \n reset: function() { \n jasmine.Clock.assertInstalled(); \n jasmine.Clock.defaultFakeTimer.reset(); \n }, \n \n tick: function(millis) { \n jasmine.Clock.assertInstalled(); \n jasmine.Clock.defaultFakeTimer.tick(millis); \n }, \n \n runFunctionsWithinRange: function(oldMillis, nowMillis) { \n jasmine.Clock.defaultFakeTimer.runFunctionsWithinRange(oldMillis, nowMillis); \n }, \n \n scheduleFunction: function(timeoutKey, funcToCall, millis, recurring) { \n jasmine.Clock.defaultFakeTimer.scheduleFunction(timeoutKey, funcToCall, millis, recurring); \n }, \n \n useMock: function() { \n if (!jasmine.Clock.isInstalled()) { \n var spec = jasmine.getEnv().currentSpec; \n spec.after(jasmine.Clock.uninstallMock); \n \n jasmine.Clock.installMock(); \n } \n }, \n \n installMock: function() { \n jasmine.Clock.installed = jasmine.Clock.defaultFakeTimer; \n }, \n \n uninstallMock: function() { \n jasmine.Clock.assertInstalled(); \n jasmine.Clock.installed = jasmine.Clock.real; \n }, \n \n real: { \n setTimeout: jasmine.getGlobal().setTimeout, \n clearTimeout: jasmine.getGlobal().clearTimeout, \n setInterval: jasmine.getGlobal().setInterval, \n clearInterval: jasmine.getGlobal().clearInterval \n }, \n \n assertInstalled: function() { \n if (!jasmine.Clock.isInstalled()) { \n throw new Error(\"Mock clock is not installed, use jasmine.Clock.useMock()\"); \n } \n }, \n \n isInstalled: function() { \n return jasmine.Clock.installed == jasmine.Clock.defaultFakeTimer; \n }, \n \n installed: null \n}; \njasmine.Clock.installed = jasmine.Clock.real; \n \n//else for IE support \njasmine.getGlobal().setTimeout = function(funcToCall, millis) { \n if (jasmine.Clock.installed.setTimeout.apply) { \n return jasmine.Clock.installed.setTimeout.apply(this, arguments); \n } else { \n return jasmine.Clock.installed.setTimeout(funcToCall, millis); \n } \n}; \n \njasmine.getGlobal().setInterval = function(funcToCall, millis) { \n if (jasmine.Clock.installed.setInterval.apply) { \n return jasmine.Clock.installed.setInterval.apply(this, arguments); \n } else { \n return jasmine.Clock.installed.setInterval(funcToCall, millis); \n } \n}; \n \njasmine.getGlobal().clearTimeout = function(timeoutKey) { \n if (jasmine.Clock.installed.clearTimeout.apply) { \n return jasmine.Clock.installed.clearTimeout.apply(this, arguments); \n } else { \n return jasmine.Clock.installed.clearTimeout(timeoutKey); \n } \n}; \n \njasmine.getGlobal().clearInterval = function(timeoutKey) { \n if (jasmine.Clock.installed.clearTimeout.apply) { \n return jasmine.Clock.installed.clearInterval.apply(this, arguments); \n } else { \n return jasmine.Clock.installed.clearInterval(timeoutKey); \n } \n}; \n \n/** \n * @constructor \n */ \njasmine.MultiReporter = function() { \n this.subReporters_ = []; \n}; \njasmine.util.inherit(jasmine.MultiReporter, jasmine.Reporter); \n \njasmine.MultiReporter.prototype.addReporter = function(reporter) { \n this.subReporters_.push(reporter); \n}; \n \n(function() { \n var functionNames = [ \n \"reportRunnerStarting\", \n \"reportRunnerResults\", \n \"reportSuiteResults\", \n \"reportSpecStarting\", \n \"reportSpecResults\", \n \"log\" \n ]; \n for (var i = 0; i < functionNames.length; i++) { \n var functionName = functionNames[i]; \n jasmine.MultiReporter.prototype[functionName] = (function(functionName) { \n return function() { \n for (var j = 0; j < this.subReporters_.length; j++) { \n var subReporter = this.subReporters_[j]; \n if (subReporter[functionName]) { \n subReporter[functionName].apply(subReporter, arguments); \n } \n } \n }; \n })(functionName); \n } \n})(); \n/** \n * Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults \n * \n * @constructor \n */ \njasmine.NestedResults = function() { \n /** \n * The total count of results \n */ \n this.totalCount = 0; \n /** \n * Number of passed results \n */ \n this.passedCount = 0; \n /** \n * Number of failed results \n */ \n this.failedCount = 0; \n /** \n * Was this suite/spec skipped? \n */ \n this.skipped = false; \n /** \n * @ignore \n */ \n this.items_ = []; \n}; \n \n/** \n * Roll up the result counts. \n * \n * @param result \n */ \njasmine.NestedResults.prototype.rollupCounts = function(result) { \n this.totalCount += result.totalCount; \n this.passedCount += result.passedCount; \n this.failedCount += result.failedCount; \n}; \n \n/** \n * Adds a log message. \n * @param values Array of message parts which will be concatenated later. \n */ \njasmine.NestedResults.prototype.log = function(values) { \n this.items_.push(new jasmine.MessageResult(values)); \n}; \n \n/** \n * Getter for the results: message & results. \n */ \njasmine.NestedResults.prototype.getItems = function() { \n return this.items_; \n}; \n \n/** \n * Adds a result, tracking counts (total, passed, & failed) \n * @param {jasmine.ExpectationResult|jasmine.NestedResults} result \n */ \njasmine.NestedResults.prototype.addResult = function(result) { \n if (result.type != 'log') { \n if (result.items_) { \n this.rollupCounts(result); \n } else { \n this.totalCount++; \n if (result.passed()) { \n this.passedCount++; \n } else { \n this.failedCount++; \n } \n } \n } \n this.items_.push(result); \n}; \n \n/** \n * @returns {Boolean} True if <b>everything</b> below passed \n */ \njasmine.NestedResults.prototype.passed = function() { \n return this.passedCount === this.totalCount; \n}; \n/** \n * Base class for pretty printing for expectation results. \n */ \njasmine.PrettyPrinter = function() { \n this.ppNestLevel_ = 0; \n}; \n \n/** \n * Formats a value in a nice, human-readable string. \n * \n * @param value \n */ \njasmine.PrettyPrinter.prototype.format = function(value) { \n this.ppNestLevel_++; \n try { \n if (value === jasmine.undefined) { \n this.emitScalar('undefined'); \n } else if (value === null) { \n this.emitScalar('null'); \n } else if (value === jasmine.getGlobal()) { \n this.emitScalar('<global>'); \n } else if (value.jasmineToString) { \n this.emitScalar(value.jasmineToString()); \n } else if (typeof value === 'string') { \n this.emitString(value); \n } else if (jasmine.isSpy(value)) { \n this.emitScalar(\"spy on \" + value.identity); \n } else if (value instanceof RegExp) { \n this.emitScalar(value.toString()); \n } else if (typeof value === 'function') { \n this.emitScalar('Function'); \n } else if (typeof value.nodeType === 'number') { \n this.emitScalar('HTMLNode'); \n } else if (value instanceof Date) { \n this.emitScalar('Date(' + value + ')'); \n } else if (value.__Jasmine_been_here_before__) { \n this.emitScalar('<circular reference: ' + (jasmine.isArray_(value) ? 'Array' : 'Object') + '>'); \n } else if (jasmine.isArray_(value) || typeof value == 'object') { \n value.__Jasmine_been_here_before__ = true; \n if (jasmine.isArray_(value)) { \n this.emitArray(value); \n } else { \n this.emitObject(value); \n } \n delete value.__Jasmine_been_here_before__; \n } else { \n this.emitScalar(value.toString()); \n } \n } finally { \n this.ppNestLevel_--; \n } \n}; \n \njasmine.PrettyPrinter.prototype.iterateObject = function(obj, fn) { \n for (var property in obj) { \n if (!obj.hasOwnProperty(property)) continue; \n if (property == '__Jasmine_been_here_before__') continue; \n fn(property, obj.__lookupGetter__ ? (obj.__lookupGetter__(property) !== jasmine.undefined && \n obj.__lookupGetter__(property) !== null) : false); \n } \n}; \n \njasmine.PrettyPrinter.prototype.emitArray = jasmine.unimplementedMethod_; \njasmine.PrettyPrinter.prototype.emitObject = jasmine.unimplementedMethod_; \njasmine.PrettyPrinter.prototype.emitScalar = jasmine.unimplementedMethod_; \njasmine.PrettyPrinter.prototype.emitString = jasmine.unimplementedMethod_; \n \njasmine.StringPrettyPrinter = function() { \n jasmine.PrettyPrinter.call(this); \n \n this.string = ''; \n}; \njasmine.util.inherit(jasmine.StringPrettyPrinter, jasmine.PrettyPrinter); \n \njasmine.StringPrettyPrinter.prototype.emitScalar = function(value) { \n this.append(value); \n}; \n \njasmine.StringPrettyPrinter.prototype.emitString = function(value) { \n this.append(\"'\" + value + \"'\"); \n}; \n \njasmine.StringPrettyPrinter.prototype.emitArray = function(array) { \n if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) { \n this.append(\"Array\"); \n return; \n } \n \n this.append('[ '); \n for (var i = 0; i < array.length; i++) { \n if (i > 0) { \n this.append(', '); \n } \n this.format(array[i]); \n } \n this.append(' ]'); \n}; \n \njasmine.StringPrettyPrinter.prototype.emitObject = function(obj) { \n if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) { \n this.append(\"Object\"); \n return; \n } \n \n var self = this; \n this.append('{ '); \n var first = true; \n \n this.iterateObject(obj, function(property, isGetter) { \n if (first) { \n first = false; \n } else { \n self.append(', '); \n } \n \n self.append(property); \n self.append(' : '); \n if (isGetter) { \n self.append('<getter>'); \n } else { \n self.format(obj[property]); \n } \n }); \n \n this.append(' }'); \n}; \n \njasmine.StringPrettyPrinter.prototype.append = function(value) { \n this.string += value; \n}; \njasmine.Queue = function(env) { \n this.env = env; \n \n // parallel to blocks. each true value in this array means the block will \n // get executed even if we abort \n this.ensured = []; \n this.blocks = []; \n this.running = false; \n this.index = 0; \n this.offset = 0; \n this.abort = false; \n}; \n \njasmine.Queue.prototype.addBefore = function(block, ensure) { \n if (ensure === jasmine.undefined) { \n ensure = false; \n } \n \n this.blocks.unshift(block); \n this.ensured.unshift(ensure); \n}; \n \njasmine.Queue.prototype.add = function(block, ensure) { \n if (ensure === jasmine.undefined) { \n ensure = false; \n } \n \n this.blocks.push(block); \n this.ensured.push(ensure); \n}; \n \njasmine.Queue.prototype.insertNext = function(block, ensure) { \n if (ensure === jasmine.undefined) { \n ensure = false; \n } \n \n this.ensured.splice((this.index + this.offset + 1), 0, ensure); \n this.blocks.splice((this.index + this.offset + 1), 0, block); \n this.offset++; \n}; \n \njasmine.Queue.prototype.start = function(onComplete) { \n this.running = true; \n this.onComplete = onComplete; \n this.next_(); \n}; \n \njasmine.Queue.prototype.isRunning = function() { \n return this.running; \n}; \n \njasmine.Queue.LOOP_DONT_RECURSE = true; \n \njasmine.Queue.prototype.next_ = function() { \n var self = this; \n var goAgain = true; \n \n while (goAgain) { \n goAgain = false; \n \n if (self.index < self.blocks.length && !(this.abort && !this.ensured[self.index])) { \n var calledSynchronously = true; \n var completedSynchronously = false; \n \n var onComplete = function () { \n if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) { \n completedSynchronously = true; \n return; \n } \n \n if (self.blocks[self.index].abort) { \n self.abort = true; \n } \n \n self.offset = 0; \n self.index++; \n \n var now = new Date().getTime(); \n if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) { \n self.env.lastUpdate = now; \n self.env.setTimeout(function() { \n self.next_(); \n }, 0); \n } else { \n if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) { \n goAgain = true; \n } else { \n self.next_(); \n } \n } \n }; \n self.blocks[self.index].execute(onComplete); \n \n calledSynchronously = false; \n if (completedSynchronously) { \n onComplete(); \n } \n \n } else { \n self.running = false; \n if (self.onComplete) { \n self.onComplete(); \n } \n } \n } \n}; \n \njasmine.Queue.prototype.results = function() { \n var results = new jasmine.NestedResults(); \n for (var i = 0; i < this.blocks.length; i++) { \n if (this.blocks[i].results) { \n results.addResult(this.blocks[i].results()); \n } \n } \n return results; \n}; \n \n \n/** \n * Runner \n * \n * @constructor \n * @param {jasmine.Env} env \n */ \njasmine.Runner = function(env) { \n var self = this; \n self.env = env; \n self.queue = new jasmine.Queue(env); \n self.before_ = []; \n self.after_ = []; \n self.suites_ = []; \n}; \n \njasmine.Runner.prototype.execute = function() { \n var self = this; \n if (self.env.reporter.reportRunnerStarting) { \n self.env.reporter.reportRunnerStarting(this); \n } \n self.queue.start(function () { \n self.finishCallback(); \n }); \n}; \n \njasmine.Runner.prototype.beforeEach = function(beforeEachFunction) { \n beforeEachFunction.typeName = 'beforeEach'; \n this.before_.splice(0,0,beforeEachFunction); \n}; \n \njasmine.Runner.prototype.afterEach = function(afterEachFunction) { \n afterEachFunction.typeName = 'afterEach'; \n this.after_.splice(0,0,afterEachFunction); \n}; \n \n \njasmine.Runner.prototype.finishCallback = function() { \n this.env.reporter.reportRunnerResults(this); \n}; \n \njasmine.Runner.prototype.addSuite = function(suite) { \n this.suites_.push(suite); \n}; \n \njasmine.Runner.prototype.add = function(block) { \n if (block instanceof jasmine.Suite) { \n this.addSuite(block); \n } \n this.queue.add(block); \n}; \n \njasmine.Runner.prototype.specs = function () { \n var suites = this.suites(); \n var specs = []; \n for (var i = 0; i < suites.length; i++) { \n specs = specs.concat(suites[i].specs()); \n } \n return specs; \n}; \n \njasmine.Runner.prototype.suites = function() { \n return this.suites_; \n}; \n \njasmine.Runner.prototype.topLevelSuites = function() { \n var topLevelSuites = []; \n for (var i = 0; i < this.suites_.length; i++) { \n if (!this.suites_[i].parentSuite) { \n topLevelSuites.push(this.suites_[i]); \n } \n } \n return topLevelSuites; \n}; \n \njasmine.Runner.prototype.results = function() { \n return this.queue.results(); \n}; \n/** \n * Internal representation of a Jasmine specification, or test. \n * \n * @constructor \n * @param {jasmine.Env} env \n * @param {jasmine.Suite} suite \n * @param {String} description \n */ \njasmine.Spec = function(env, suite, description) { \n if (!env) { \n throw new Error('jasmine.Env() required'); \n } \n if (!suite) { \n throw new Error('jasmine.Suite() required'); \n } \n var spec = this; \n spec.id = env.nextSpecId ? env.nextSpecId() : null; \n spec.env = env; \n spec.suite = suite; \n spec.description = description; \n spec.queue = new jasmine.Queue(env); \n \n spec.afterCallbacks = []; \n spec.spies_ = []; \n \n spec.results_ = new jasmine.NestedResults(); \n spec.results_.description = description; \n spec.matchersClass = null; \n}; \n \njasmine.Spec.prototype.getFullName = function() { \n return this.suite.getFullName() + ' ' + this.description + '.'; \n}; \n \n \njasmine.Spec.prototype.results = function() { \n return this.results_; \n}; \n \n/** \n * All parameters are pretty-printed and concatenated together, then written to the spec's output. \n * \n * Be careful not to leave calls to <code>jasmine.log</code> in production code. \n */ \njasmine.Spec.prototype.log = function() { \n return this.results_.log(arguments); \n}; \n \njasmine.Spec.prototype.runs = function (func) { \n var block = new jasmine.Block(this.env, func, this); \n this.addToQueue(block); \n return this; \n}; \n \njasmine.Spec.prototype.addToQueue = function (block) { \n if (this.queue.isRunning()) { \n this.queue.insertNext(block); \n } else { \n this.queue.add(block); \n } \n}; \n \n/** \n * @param {jasmine.ExpectationResult} result \n */ \njasmine.Spec.prototype.addMatcherResult = function(result) { \n this.results_.addResult(result); \n}; \n \njasmine.Spec.prototype.expect = function(actual) { \n var positive = new (this.getMatchersClass_())(this.env, actual, this); \n positive.not = new (this.getMatchersClass_())(this.env, actual, this, true); \n return positive; \n}; \n \n/** \n * Waits a fixed time period before moving to the next block. \n * \n * @deprecated Use waitsFor() instead \n * @param {Number} timeout milliseconds to wait \n */ \njasmine.Spec.prototype.waits = function(timeout) { \n var waitsFunc = new jasmine.WaitsBlock(this.env, timeout, this); \n this.addToQueue(waitsFunc); \n return this; \n}; \n \n/** \n * Waits for the latchFunction to return true before proceeding to the next block. \n * \n * @param {Function} latchFunction \n * @param {String} optional_timeoutMessage \n * @param {Number} optional_timeout \n */ \njasmine.Spec.prototype.waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) { \n var latchFunction_ = null; \n var optional_timeoutMessage_ = null; \n var optional_timeout_ = null; \n \n for (var i = 0; i < arguments.length; i++) { \n var arg = arguments[i]; \n switch (typeof arg) { \n case 'function': \n latchFunction_ = arg; \n break; \n case 'string': \n optional_timeoutMessage_ = arg; \n break; \n case 'number': \n optional_timeout_ = arg; \n break; \n } \n } \n \n var waitsForFunc = new jasmine.WaitsForBlock(this.env, optional_timeout_, latchFunction_, optional_timeoutMessage_, this); \n this.addToQueue(waitsForFunc); \n return this; \n}; \n \njasmine.Spec.prototype.fail = function (e) { \n var expectationResult = new jasmine.ExpectationResult({ \n passed: false, \n message: e ? jasmine.util.formatException(e) : 'Exception', \n trace: { stack: e.stack } \n }); \n this.results_.addResult(expectationResult); \n}; \n \njasmine.Spec.prototype.getMatchersClass_ = function() { \n return this.matchersClass || this.env.matchersClass; \n}; \n \njasmine.Spec.prototype.addMatchers = function(matchersPrototype) { \n var parent = this.getMatchersClass_(); \n var newMatchersClass = function() { \n parent.apply(this, arguments); \n }; \n jasmine.util.inherit(newMatchersClass, parent); \n jasmine.Matchers.wrapInto_(matchersPrototype, newMatchersClass); \n this.matchersClass = newMatchersClass; \n}; \n \njasmine.Spec.prototype.finishCallback = function() { \n this.env.reporter.reportSpecResults(this); \n}; \n \njasmine.Spec.prototype.finish = function(onComplete) { \n this.removeAllSpies(); \n this.finishCallback(); \n if (onComplete) { \n onComplete(); \n } \n}; \n \njasmine.Spec.prototype.after = function(doAfter) { \n if (this.queue.isRunning()) { \n this.queue.add(new jasmine.Block(this.env, doAfter, this), true); \n } else { \n this.afterCallbacks.unshift(doAfter); \n } \n}; \n \njasmine.Spec.prototype.execute = function(onComplete) { \n var spec = this; \n if (!spec.env.specFilter(spec)) { \n spec.results_.skipped = true; \n spec.finish(onComplete); \n return; \n } \n \n this.env.reporter.reportSpecStarting(this); \n \n spec.env.currentSpec = spec; \n \n spec.addBeforesAndAftersToQueue(); \n \n spec.queue.start(function () { \n spec.finish(onComplete); \n }); \n}; \n \njasmine.Spec.prototype.addBeforesAndAftersToQueue = function() { \n var runner = this.env.currentRunner(); \n var i; \n \n for (var suite = this.suite; suite; suite = suite.parentSuite) { \n for (i = 0; i < suite.before_.length; i++) { \n this.queue.addBefore(new jasmine.Block(this.env, suite.before_[i], this)); \n } \n } \n for (i = 0; i < runner.before_.length; i++) { \n this.queue.addBefore(new jasmine.Block(this.env, runner.before_[i], this)); \n } \n for (i = 0; i < this.afterCallbacks.length; i++) { \n this.queue.add(new jasmine.Block(this.env, this.afterCallbacks[i], this), true); \n } \n for (suite = this.suite; suite; suite = suite.parentSuite) { \n for (i = 0; i < suite.after_.length; i++) { \n this.queue.add(new jasmine.Block(this.env, suite.after_[i], this), true); \n } \n } \n for (i = 0; i < runner.after_.length; i++) { \n this.queue.add(new jasmine.Block(this.env, runner.after_[i], this), true); \n } \n}; \n \njasmine.Spec.prototype.explodes = function() { \n throw 'explodes function should not have been called'; \n}; \n \njasmine.Spec.prototype.spyOn = function(obj, methodName, ignoreMethodDoesntExist) { \n if (obj == jasmine.undefined) { \n throw \"spyOn could not find an object to spy upon for \" + methodName + \"()\"; \n } \n \n if (!ignoreMethodDoesntExist && obj[methodName] === jasmine.undefined) { \n throw methodName + '() method does not exist'; \n } \n \n if (!ignoreMethodDoesntExist && obj[methodName] && obj[methodName].isSpy) { \n throw new Error(methodName + ' has already been spied upon'); \n } \n \n var spyObj = jasmine.createSpy(methodName); \n \n this.spies_.push(spyObj); \n spyObj.baseObj = obj; \n spyObj.methodName = methodName; \n spyObj.originalValue = obj[methodName]; \n \n obj[methodName] = spyObj; \n \n return spyObj; \n}; \n \njasmine.Spec.prototype.removeAllSpies = function() { \n for (var i = 0; i < this.spies_.length; i++) { \n var spy = this.spies_[i]; \n spy.baseObj[spy.methodName] = spy.originalValue; \n } \n this.spies_ = []; \n}; \n \n/** \n * Internal representation of a Jasmine suite. \n * \n * @constructor \n * @param {jasmine.Env} env \n * @param {String} description \n * @param {Function} specDefinitions \n * @param {jasmine.Suite} parentSuite \n */ \njasmine.Suite = function(env, description, specDefinitions, parentSuite) { \n var self = this; \n self.id = env.nextSuiteId ? env.nextSuiteId() : null; \n self.description = description; \n self.queue = new jasmine.Queue(env); \n self.parentSuite = parentSuite; \n self.env = env; \n self.before_ = []; \n self.after_ = []; \n self.children_ = []; \n self.suites_ = []; \n self.specs_ = []; \n}; \n \njasmine.Suite.prototype.getFullName = function() { \n var fullName = this.description; \n for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) { \n fullName = parentSuite.description + ' ' + fullName; \n } \n return fullName; \n}; \n \njasmine.Suite.prototype.finish = function(onComplete) { \n this.env.reporter.reportSuiteResults(this); \n this.finished = true; \n if (typeof(onComplete) == 'function') { \n onComplete(); \n } \n}; \n \njasmine.Suite.prototype.beforeEach = function(beforeEachFunction) { \n beforeEachFunction.typeName = 'beforeEach'; \n this.before_.unshift(beforeEachFunction); \n}; \n \njasmine.Suite.prototype.afterEach = function(afterEachFunction) { \n afterEachFunction.typeName = 'afterEach'; \n this.after_.unshift(afterEachFunction); \n}; \n \njasmine.Suite.prototype.results = function() { \n return this.queue.results(); \n}; \n \njasmine.Suite.prototype.add = function(suiteOrSpec) { \n this.children_.push(suiteOrSpec); \n if (suiteOrSpec instanceof jasmine.Suite) { \n this.suites_.push(suiteOrSpec); \n this.env.currentRunner().addSuite(suiteOrSpec); \n } else { \n this.specs_.push(suiteOrSpec); \n } \n this.queue.add(suiteOrSpec); \n}; \n \njasmine.Suite.prototype.specs = function() { \n return this.specs_; \n}; \n \njasmine.Suite.prototype.suites = function() { \n return this.suites_; \n}; \n \njasmine.Suite.prototype.children = function() { \n return this.children_; \n}; \n \njasmine.Suite.prototype.execute = function(onComplete) { \n var self = this; \n this.queue.start(function () { \n self.finish(onComplete); \n }); \n}; \njasmine.WaitsBlock = function(env, timeout, spec) { \n this.timeout = timeout; \n jasmine.Block.call(this, env, null, spec); \n}; \n \njasmine.util.inherit(jasmine.WaitsBlock, jasmine.Block); \n \njasmine.WaitsBlock.prototype.execute = function (onComplete) { \n if (jasmine.VERBOSE) { \n this.env.reporter.log('>> Jasmine waiting for ' + this.timeout + ' ms...'); \n } \n this.env.setTimeout(function () { \n onComplete(); \n }, this.timeout); \n}; \n/** \n * A block which waits for some condition to become true, with timeout. \n * \n * @constructor \n * @extends jasmine.Block \n * @param {jasmine.Env} env The Jasmine environment. \n * @param {Number} timeout The maximum time in milliseconds to wait for the condition to become true. \n * @param {Function} latchFunction A function which returns true when the desired condition has been met. \n * @param {String} message The message to display if the desired condition hasn't been met within the given time period. \n * @param {jasmine.Spec} spec The Jasmine spec. \n */ \njasmine.WaitsForBlock = function(env, timeout, latchFunction, message, spec) { \n this.timeout = timeout || env.defaultTimeoutInterval; \n this.latchFunction = latchFunction; \n this.message = message; \n this.totalTimeSpentWaitingForLatch = 0; \n jasmine.Block.call(this, env, null, spec); \n}; \njasmine.util.inherit(jasmine.WaitsForBlock, jasmine.Block); \n \njasmine.WaitsForBlock.TIMEOUT_INCREMENT = 10; \n \njasmine.WaitsForBlock.prototype.execute = function(onComplete) { \n if (jasmine.VERBOSE) { \n this.env.reporter.log('>> Jasmine waiting for ' + (this.message || 'something to happen')); \n } \n var latchFunctionResult; \n try { \n latchFunctionResult = this.latchFunction.apply(this.spec); \n } catch (e) { \n this.spec.fail(e); \n onComplete(); \n return; \n } \n \n if (latchFunctionResult) { \n onComplete(); \n } else if (this.totalTimeSpentWaitingForLatch >= this.timeout) { \n var message = 'timed out after ' + this.timeout + ' msec waiting for ' + (this.message || 'something to happen'); \n this.spec.fail({ \n name: 'timeout', \n message: message \n }); \n \n this.abort = true; \n onComplete(); \n } else { \n this.totalTimeSpentWaitingForLatch += jasmine.WaitsForBlock.TIMEOUT_INCREMENT; \n var self = this; \n this.env.setTimeout(function() { \n self.execute(onComplete); \n }, jasmine.WaitsForBlock.TIMEOUT_INCREMENT); \n } \n}; \n \njasmine.version_= { \n \"major\": 1, \n \"minor\": 3, \n \"build\": 1, \n \"revision\": 1354556913 \n}; \n";
						$this -> makeFile("lib/jasmine-1.3.1/jasmine.js", $js);
					}

					public function makeJasmineLibHTML() {
						$html = "jasmine.HtmlReporterHelpers = {}; \n \njasmine.HtmlReporterHelpers.createDom = function(type, attrs, childrenVarArgs) { \n var el = document.createElement(type); \n \n for (var i = 2; i < arguments.length; i++) { \n var child = arguments[i]; \n \n if (typeof child === 'string') { \n el.appendChild(document.createTextNode(child)); \n } else { \n if (child) { \n el.appendChild(child); \n } \n } \n } \n \n for (var attr in attrs) { \n if (attr == \"className\") { \n el[attr] = attrs[attr]; \n } else { \n el.setAttribute(attr, attrs[attr]); \n } \n } \n \n return el; \n}; \n \njasmine.HtmlReporterHelpers.getSpecStatus = function(child) { \n var results = child.results(); \n var status = results.passed() ? 'passed' : 'failed'; \n if (results.skipped) { \n status = 'skipped'; \n } \n \n return status; \n}; \n \njasmine.HtmlReporterHelpers.appendToSummary = function(child, childElement) { \n var parentDiv = this.dom.summary; \n var parentSuite = (typeof child.parentSuite == 'undefined') ? 'suite' : 'parentSuite'; \n var parent = child[parentSuite]; \n \n if (parent) { \n if (typeof this.views.suites[parent.id] == 'undefined') { \n this.views.suites[parent.id] = new jasmine.HtmlReporter.SuiteView(parent, this.dom, this.views); \n } \n parentDiv = this.views.suites[parent.id].element; \n } \n \n parentDiv.appendChild(childElement); \n}; \n \n \njasmine.HtmlReporterHelpers.addHelpers = function(ctor) { \n for(var fn in jasmine.HtmlReporterHelpers) { \n ctor.prototype[fn] = jasmine.HtmlReporterHelpers[fn]; \n } \n}; \n \njasmine.HtmlReporter = function(_doc) { \n var self = this; \n var doc = _doc || window.document; \n \n var reporterView; \n \n var dom = {}; \n \n // Jasmine Reporter Public Interface \n self.logRunningSpecs = false; \n \n self.reportRunnerStarting = function(runner) { \n var specs = runner.specs() || []; \n \n if (specs.length == 0) { \n return; \n } \n \n createReporterDom(runner.env.versionString()); \n doc.body.appendChild(dom.reporter); \n setExceptionHandling(); \n \n reporterView = new jasmine.HtmlReporter.ReporterView(dom); \n reporterView.addSpecs(specs, self.specFilter); \n }; \n \n self.reportRunnerResults = function(runner) { \n reporterView && reporterView.complete(); \n }; \n \n self.reportSuiteResults = function(suite) { \n reporterView.suiteComplete(suite); \n }; \n \n self.reportSpecStarting = function(spec) { \n if (self.logRunningSpecs) { \n self.log('>> Jasmine Running ' + spec.suite.description + ' ' + spec.description + '...'); \n } \n }; \n \n self.reportSpecResults = function(spec) { \n reporterView.specComplete(spec); \n }; \n \n self.log = function() { \n var console = jasmine.getGlobal().console; \n if (console && console.log) { \n if (console.log.apply) { \n console.log.apply(console, arguments); \n } else { \n console.log(arguments); // ie fix: console.log.apply doesn't exist on ie \n } \n } \n }; \n \n self.specFilter = function(spec) { \n if (!focusedSpecName()) { \n return true; \n } \n \n return spec.getFullName().indexOf(focusedSpecName()) === 0; \n }; \n \n return self; \n \n function focusedSpecName() { \n var specName; \n \n (function memoizeFocusedSpec() { \n if (specName) { \n return; \n } \n \n var paramMap = []; \n var params = jasmine.HtmlReporter.parameters(doc); \n \n for (var i = 0; i < params.length; i++) { \n var p = params[i].split('='); \n paramMap[decodeURIComponent(p[0])] = decodeURIComponent(p[1]); \n } \n \n specName = paramMap.spec; \n })(); \n \n return specName; \n } \n \n function createReporterDom(version) { \n dom.reporter = self.createDom('div', { id: 'HTMLReporter', className: 'jasmine_reporter' }, \n dom.banner = self.createDom('div', { className: 'banner' }, \n self.createDom('span', { className: 'title' }, \"Jasmine \"), \n self.createDom('span', { className: 'version' }, version)), \n \n dom.symbolSummary = self.createDom('ul', {className: 'symbolSummary'}), \n dom.alert = self.createDom('div', {className: 'alert'}, \n self.createDom('span', { className: 'exceptions' }, \n self.createDom('label', { className: 'label', 'for': 'no_try_catch' }, 'No try/catch'), \n self.createDom('input', { id: 'no_try_catch', type: 'checkbox' }))), \n dom.results = self.createDom('div', {className: 'results'}, \n dom.summary = self.createDom('div', { className: 'summary' }), \n dom.details = self.createDom('div', { id: 'details' })) \n ); \n } \n \n function noTryCatch() { \n return window.location.search.match(/catch=false/); \n } \n \n function searchWithCatch() { \n var params = jasmine.HtmlReporter.parameters(window.document); \n var removed = false; \n var i = 0; \n \n while (!removed && i < params.length) { \n if (params[i].match(/catch=/)) { \n params.splice(i, 1); \n removed = true; \n } \n i++; \n } \n if (jasmine.CATCH_EXCEPTIONS) { \n params.push(\"catch=false\"); \n } \n \n return params.join(\"&\"); \n } \n \n function setExceptionHandling() { \n var chxCatch = document.getElementById('no_try_catch'); \n \n if (noTryCatch()) { \n chxCatch.setAttribute('checked', true); \n jasmine.CATCH_EXCEPTIONS = false; \n } \n chxCatch.onclick = function() { \n window.location.search = searchWithCatch(); \n }; \n } \n}; \njasmine.HtmlReporter.parameters = function(doc) { \n var paramStr = doc.location.search.substring(1); \n var params = []; \n \n if (paramStr.length > 0) { \n params = paramStr.split('&'); \n } \n return params; \n} \njasmine.HtmlReporter.sectionLink = function(sectionName) { \n var link = '?'; \n var params = []; \n \n if (sectionName) { \n params.push('spec=' + encodeURIComponent(sectionName)); \n } \n if (!jasmine.CATCH_EXCEPTIONS) { \n params.push(\"catch=false\"); \n } \n if (params.length > 0) { \n link += params.join(\"&\"); \n } \n \n return link; \n}; \njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter); \njasmine.HtmlReporter.ReporterView = function(dom) { \n this.startedAt = new Date(); \n this.runningSpecCount = 0; \n this.completeSpecCount = 0; \n this.passedCount = 0; \n this.failedCount = 0; \n this.skippedCount = 0; \n \n this.createResultsMenu = function() { \n this.resultsMenu = this.createDom('span', {className: 'resultsMenu bar'}, \n this.summaryMenuItem = this.createDom('a', {className: 'summaryMenuItem', href: \"#\"}, '0 specs'), \n ' | ', \n this.detailsMenuItem = this.createDom('a', {className: 'detailsMenuItem', href: \"#\"}, '0 failing')); \n \n this.summaryMenuItem.onclick = function() { \n dom.reporter.className = dom.reporter.className.replace(/ showDetails/g, ''); \n }; \n \n this.detailsMenuItem.onclick = function() { \n showDetails(); \n }; \n }; \n \n this.addSpecs = function(specs, specFilter) { \n this.totalSpecCount = specs.length; \n \n this.views = { \n specs: {}, \n suites: {} \n }; \n \n for (var i = 0; i < specs.length; i++) { \n var spec = specs[i]; \n this.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom, this.views); \n if (specFilter(spec)) { \n this.runningSpecCount++; \n } \n } \n }; \n \n this.specComplete = function(spec) { \n this.completeSpecCount++; \n \n if (isUndefined(this.views.specs[spec.id])) { \n this.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom); \n } \n \n var specView = this.views.specs[spec.id]; \n \n switch (specView.status()) { \n case 'passed': \n this.passedCount++; \n break; \n \n case 'failed': \n this.failedCount++; \n break; \n \n case 'skipped': \n this.skippedCount++; \n break; \n } \n \n specView.refresh(); \n this.refresh(); \n }; \n \n this.suiteComplete = function(suite) { \n var suiteView = this.views.suites[suite.id]; \n if (isUndefined(suiteView)) { \n return; \n } \n suiteView.refresh(); \n }; \n \n this.refresh = function() { \n \n if (isUndefined(this.resultsMenu)) { \n this.createResultsMenu(); \n } \n \n // currently running UI \n if (isUndefined(this.runningAlert)) { \n this.runningAlert = this.createDom('a', { href: jasmine.HtmlReporter.sectionLink(), className: \"runningAlert bar\" }); \n dom.alert.appendChild(this.runningAlert); \n } \n this.runningAlert.innerHTML = \"Running \" + this.completeSpecCount + \" of \" + specPluralizedFor(this.totalSpecCount); \n \n // skipped specs UI \n if (isUndefined(this.skippedAlert)) { \n this.skippedAlert = this.createDom('a', { href: jasmine.HtmlReporter.sectionLink(), className: \"skippedAlert bar\" }); \n } \n \n this.skippedAlert.innerHTML = \"Skipping \" + this.skippedCount + \" of \" + specPluralizedFor(this.totalSpecCount) + \" - run all\"; \n \n if (this.skippedCount === 1 && isDefined(dom.alert)) { \n dom.alert.appendChild(this.skippedAlert); \n } \n \n // passing specs UI \n if (isUndefined(this.passedAlert)) { \n this.passedAlert = this.createDom('span', { href: jasmine.HtmlReporter.sectionLink(), className: \"passingAlert bar\" }); \n } \n this.passedAlert.innerHTML = \"Passing \" + specPluralizedFor(this.passedCount); \n \n // failing specs UI \n if (isUndefined(this.failedAlert)) { \n this.failedAlert = this.createDom('span', {href: \"?\", className: \"failingAlert bar\"}); \n } \n this.failedAlert.innerHTML = \"Failing \" + specPluralizedFor(this.failedCount); \n \n if (this.failedCount === 1 && isDefined(dom.alert)) { \n dom.alert.appendChild(this.failedAlert); \n dom.alert.appendChild(this.resultsMenu); \n } \n \n // summary info \n this.summaryMenuItem.innerHTML = \"\" + specPluralizedFor(this.runningSpecCount); \n this.detailsMenuItem.innerHTML = \"\" + this.failedCount + \" failing\"; \n }; \n \n this.complete = function() { \n dom.alert.removeChild(this.runningAlert); \n \n this.skippedAlert.innerHTML = \"Ran \" + this.runningSpecCount + \" of \" + specPluralizedFor(this.totalSpecCount) + \" - run all\"; \n \n if (this.failedCount === 0) { \n dom.alert.appendChild(this.createDom('span', {className: 'passingAlert bar'}, \"Passing \" + specPluralizedFor(this.passedCount))); \n } else { \n showDetails(); \n } \n \n dom.banner.appendChild(this.createDom('span', {className: 'duration'}, \"finished in \" + ((new Date().getTime() - this.startedAt.getTime()) / 1000) + \"s\")); \n }; \n \n return this; \n \n function showDetails() { \n if (dom.reporter.className.search(/showDetails/) === -1) { \n dom.reporter.className += \" showDetails\"; \n } \n } \n \n function isUndefined(obj) { \n return typeof obj === 'undefined'; \n } \n \n function isDefined(obj) { \n return !isUndefined(obj); \n } \n \n function specPluralizedFor(count) { \n var str = count + \" spec\"; \n if (count > 1) { \n str += \"s\" \n } \n return str; \n } \n \n}; \n \njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.ReporterView); \n \n \njasmine.HtmlReporter.SpecView = function(spec, dom, views) { \n this.spec = spec; \n this.dom = dom; \n this.views = views; \n \n this.symbol = this.createDom('li', { className: 'pending' }); \n this.dom.symbolSummary.appendChild(this.symbol); \n \n this.summary = this.createDom('div', { className: 'specSummary' }, \n this.createDom('a', { \n className: 'description', \n href: jasmine.HtmlReporter.sectionLink(this.spec.getFullName()), \n title: this.spec.getFullName() \n }, this.spec.description) \n ); \n \n this.detail = this.createDom('div', { className: 'specDetail' }, \n this.createDom('a', { \n className: 'description', \n href: '?spec=' + encodeURIComponent(this.spec.getFullName()), \n title: this.spec.getFullName() \n }, this.spec.getFullName()) \n ); \n}; \n \njasmine.HtmlReporter.SpecView.prototype.status = function() { \n return this.getSpecStatus(this.spec); \n}; \n \njasmine.HtmlReporter.SpecView.prototype.refresh = function() { \n this.symbol.className = this.status(); \n \n switch (this.status()) { \n case 'skipped': \n break; \n \n case 'passed': \n this.appendSummaryToSuiteDiv(); \n break; \n \n case 'failed': \n this.appendSummaryToSuiteDiv(); \n this.appendFailureDetail(); \n break; \n } \n}; \n \njasmine.HtmlReporter.SpecView.prototype.appendSummaryToSuiteDiv = function() { \n this.summary.className += ' ' + this.status(); \n this.appendToSummary(this.spec, this.summary); \n}; \n \njasmine.HtmlReporter.SpecView.prototype.appendFailureDetail = function() { \n this.detail.className += ' ' + this.status(); \n \n var resultItems = this.spec.results().getItems(); \n var messagesDiv = this.createDom('div', { className: 'messages' }); \n \n for (var i = 0; i < resultItems.length; i++) { \n var result = resultItems[i]; \n \n if (result.type == 'log') { \n messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage log'}, result.toString())); \n } else if (result.type == 'expect' && result.passed && !result.passed()) { \n messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage fail'}, result.message)); \n \n if (result.trace.stack) { \n messagesDiv.appendChild(this.createDom('div', {className: 'stackTrace'}, result.trace.stack)); \n } \n } \n } \n \n if (messagesDiv.childNodes.length > 0) { \n this.detail.appendChild(messagesDiv); \n this.dom.details.appendChild(this.detail); \n } \n}; \n \njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.SpecView);jasmine.HtmlReporter.SuiteView = function(suite, dom, views) { \n this.suite = suite; \n this.dom = dom; \n this.views = views; \n \n this.element = this.createDom('div', { className: 'suite' }, \n this.createDom('a', { className: 'description', href: jasmine.HtmlReporter.sectionLink(this.suite.getFullName()) }, this.suite.description) \n ); \n \n this.appendToSummary(this.suite, this.element); \n}; \n \njasmine.HtmlReporter.SuiteView.prototype.status = function() { \n return this.getSpecStatus(this.suite); \n}; \n \njasmine.HtmlReporter.SuiteView.prototype.refresh = function() { \n this.element.className += \" \" + this.status(); \n}; \n \njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.SuiteView); \n \n/* @deprecated Use jasmine.HtmlReporter instead \n */ \njasmine.TrivialReporter = function(doc) { \n this.document = doc || document; \n this.suiteDivs = {}; \n this.logRunningSpecs = false; \n}; \n \njasmine.TrivialReporter.prototype.createDom = function(type, attrs, childrenVarArgs) { \n var el = document.createElement(type); \n \n for (var i = 2; i < arguments.length; i++) { \n var child = arguments[i]; \n \n if (typeof child === 'string') { \n el.appendChild(document.createTextNode(child)); \n } else { \n if (child) { el.appendChild(child); } \n } \n } \n \n for (var attr in attrs) { \n if (attr == \"className\") { \n el[attr] = attrs[attr]; \n } else { \n el.setAttribute(attr, attrs[attr]); \n } \n } \n \n return el; \n}; \n \njasmine.TrivialReporter.prototype.reportRunnerStarting = function(runner) { \n var showPassed, showSkipped; \n \n this.outerDiv = this.createDom('div', { id: 'TrivialReporter', className: 'jasmine_reporter' }, \n this.createDom('div', { className: 'banner' }, \n this.createDom('div', { className: 'logo' }, \n this.createDom('span', { className: 'title' }, \"Jasmine\"), \n this.createDom('span', { className: 'version' }, runner.env.versionString())), \n this.createDom('div', { className: 'options' }, \n \"Show \", \n showPassed = this.createDom('input', { id: \"__jasmine_TrivialReporter_showPassed__\", type: 'checkbox' }), \n this.createDom('label', { \"for\": \"__jasmine_TrivialReporter_showPassed__\" }, \" passed \"), \n showSkipped = this.createDom('input', { id: \"__jasmine_TrivialReporter_showSkipped__\", type: 'checkbox' }), \n this.createDom('label', { \"for\": \"__jasmine_TrivialReporter_showSkipped__\" }, \" skipped\") \n ) \n ), \n \n this.runnerDiv = this.createDom('div', { className: 'runner running' }, \n this.createDom('a', { className: 'run_spec', href: '?' }, \"run all\"), \n this.runnerMessageSpan = this.createDom('span', {}, \"Running...\"), \n this.finishedAtSpan = this.createDom('span', { className: 'finished-at' }, \"\")) \n ); \n \n this.document.body.appendChild(this.outerDiv); \n \n var suites = runner.suites(); \n for (var i = 0; i < suites.length; i++) { \n var suite = suites[i]; \n var suiteDiv = this.createDom('div', { className: 'suite' }, \n this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(suite.getFullName()) }, \"run\"), \n this.createDom('a', { className: 'description', href: '?spec=' + encodeURIComponent(suite.getFullName()) }, suite.description)); \n this.suiteDivs[suite.id] = suiteDiv; \n var parentDiv = this.outerDiv; \n if (suite.parentSuite) { \n parentDiv = this.suiteDivs[suite.parentSuite.id]; \n } \n parentDiv.appendChild(suiteDiv); \n } \n \n this.startedAt = new Date(); \n \n var self = this; \n showPassed.onclick = function(evt) { \n if (showPassed.checked) { \n self.outerDiv.className += ' show-passed'; \n } else { \n self.outerDiv.className = self.outerDiv.className.replace(/ show-passed/, ''); \n } \n }; \n \n showSkipped.onclick = function(evt) { \n if (showSkipped.checked) { \n self.outerDiv.className += ' show-skipped'; \n } else { \n self.outerDiv.className = self.outerDiv.className.replace(/ show-skipped/, ''); \n } \n }; \n}; \n \njasmine.TrivialReporter.prototype.reportRunnerResults = function(runner) { \n var results = runner.results(); \n var className = (results.failedCount > 0) ? \"runner failed\" : \"runner passed\"; \n this.runnerDiv.setAttribute(\"class\", className); \n //do it twice for IE \n this.runnerDiv.setAttribute(\"className\", className); \n var specs = runner.specs(); \n var specCount = 0; \n for (var i = 0; i < specs.length; i++) { \n if (this.specFilter(specs[i])) { \n specCount++; \n } \n } \n var message = \"\" + specCount + \" spec\" + (specCount == 1 ? \"\" : \"s\" ) + \", \" + results.failedCount + \" failure\" + ((results.failedCount == 1) ? \"\" : \"s\"); \n message += \" in \" + ((new Date().getTime() - this.startedAt.getTime()) / 1000) + \"s\"; \n this.runnerMessageSpan.replaceChild(this.createDom('a', { className: 'description', href: '?'}, message), this.runnerMessageSpan.firstChild); \n \n this.finishedAtSpan.appendChild(document.createTextNode(\"Finished at \" + new Date().toString())); \n}; \n \njasmine.TrivialReporter.prototype.reportSuiteResults = function(suite) { \n var results = suite.results(); \n var status = results.passed() ? 'passed' : 'failed'; \n if (results.totalCount === 0) { // todo: change this to check results.skipped \n status = 'skipped'; \n } \n this.suiteDivs[suite.id].className += \" \" + status; \n}; \n \njasmine.TrivialReporter.prototype.reportSpecStarting = function(spec) { \n if (this.logRunningSpecs) { \n this.log('>> Jasmine Running ' + spec.suite.description + ' ' + spec.description + '...'); \n } \n}; \n \njasmine.TrivialReporter.prototype.reportSpecResults = function(spec) { \n var results = spec.results(); \n var status = results.passed() ? 'passed' : 'failed'; \n if (results.skipped) { \n status = 'skipped'; \n } \n var specDiv = this.createDom('div', { className: 'spec ' + status }, \n this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(spec.getFullName()) }, \"run\"), \n this.createDom('a', { \n className: 'description', \n href: '?spec=' + encodeURIComponent(spec.getFullName()), \n title: spec.getFullName() \n }, spec.description)); \n \n \n var resultItems = results.getItems(); \n var messagesDiv = this.createDom('div', { className: 'messages' }); \n for (var i = 0; i < resultItems.length; i++) { \n var result = resultItems[i]; \n \n if (result.type == 'log') { \n messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage log'}, result.toString())); \n } else if (result.type == 'expect' && result.passed && !result.passed()) { \n messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage fail'}, result.message)); \n \n if (result.trace.stack) { \n messagesDiv.appendChild(this.createDom('div', {className: 'stackTrace'}, result.trace.stack)); \n } \n } \n } \n \n if (messagesDiv.childNodes.length > 0) { \n specDiv.appendChild(messagesDiv); \n } \n \n this.suiteDivs[spec.suite.id].appendChild(specDiv); \n}; \n \njasmine.TrivialReporter.prototype.log = function() { \n var console = jasmine.getGlobal().console; \n if (console && console.log) { \n if (console.log.apply) { \n console.log.apply(console, arguments); \n } else { \n console.log(arguments); // ie fix: console.log.apply doesn't exist on ie \n } \n } \n}; \n \njasmine.TrivialReporter.prototype.getLocation = function() { \n return this.document.location; \n}; \n \njasmine.TrivialReporter.prototype.specFilter = function(spec) { \n var paramMap = {}; \n var params = this.getLocation().search.substring(1).split('&'); \n for (var i = 0; i < params.length; i++) { \n var p = params[i].split('='); \n paramMap[decodeURIComponent(p[0])] = decodeURIComponent(p[1]); \n } \n \n if (!paramMap.spec) { \n return true; \n } \n return spec.getFullName().indexOf(paramMap.spec) === 0; \n}; \n";
						$this -> makeFile("lib/jasmine-1.3.1/jasmine-html.js", $html);
					}

					public function makeToolkitJS() {
						$js = "var Class={_super:function(e,t,n){e.baseConstructor[t].apply(e,Array.prototype.slice.call(arguments,2))},extend:function(e,t){e.prototype=new t;e.prototype.baseConstructor=new t;return e.prototype},implement:function(e,t){for(var n in t){if(!e.prototype[n])e.prototype[n]=t[n]}}};(function(e){e.Utensil={_stage:e,stage:function(t,n){if(t!=undefined){this._stage=t;if(n)this._stage.style.position=\"relative\"}return this._stage==e?document.body:this._stage},addChild:function(e){document.body.appendChild(e)},stageWidth:function(t){if(t)return e.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;return this.stage()==e?e.innerWidth||document.documentElement.clientWidth||document.body.clientWidth:parseInt(this.stage().style.width.replace(\"px\",\"\"))>0?parseInt(this.stage().style.width.replace(\"px\",\"\")):this.stage().clientWidth},stageHeight:function(t){if(t)return e.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;return this.stage()==e?e.innerHeight||document.documentElement.clientHeight||document.body.clientHeight:parseInt(this.stage().style.height.replace(\"px\",\"\"))>0?parseInt(this.stage().style.height.replace(\"px\",\"\")):this.stage().clientHeight},getX:function(e,t){if(t){var n=0;var r=0;if(e.offsetParent){do{n+=e.offsetLeft;r+=e.offsetTop}while(e=e.offsetParent)}return n}return isNaN(parseInt(e.style.left.replace(\"px\",\"\")))?0:parseInt(e.style.left.replace(\"px\",\"\"))},getY:function(e,t){if(t){var n=0;if(e.offsetParent)while(1){n+=e.style.top;if(!e.offsetParent)break;e=e.offsetParent}else if(e.y)n+=e.y;return n}return isNaN(parseInt(e.style.top.replace(\"px\",\"\")))?0:parseInt(e.style.top.replace(\"px\",\"\"))},getWidth:function(e){return isNaN(parseInt(e.style.width.replace(\"px\",\"\")))?0:parseInt(e.style.width.replace(\"px\",\"\"))},getHeight:function(e){return isNaN(parseInt(e.style.height.replace(\"px\",\"\")))?0:parseInt(e.style.height.replace(\"px\",\"\"))},trace:function(){var e=\"\";for(var t in arguments){e+=arguments[t]+\",\"}alert(e)},resetStyle:function(e){e.style.position=\"absolute\";e.style.margin=\"0\";e.style.padding=\"0\"},mouseX:function(e,t){var n;if(t.pageX){n=t.pageX}else{n=t.clientX+document.body.scrollLeft+document.documentElement.scrollLeft}n-=e.offsetLeft;return n},mouseY:function(e,t){var n;if(t.pageY){n=t.pageY}else{n=t.clientY+document.body.scrollTop+document.documentElement.scrollTop}n-=e.offsetTop;return n},mouseLeave:function(t){if(!t)var t=e.event;var n=e.event?t.srcElement:t.target;var r=t.relatedTarget?t.relatedTarget:t.toElement;while(r!=n&&r.nodeName!=\"BODY\")r=r.parentNode;if(r==n)return},ImageLoader:function(e,t){var n=new Image;n.onload=function(){t(n)};n.src=e},postURL:function(e,t,n){n=n||\"post\";var r=document.createElement(\"form\");r.setAttribute(\"method\",n);r.setAttribute(\"action\",e);var i=document.createElement(\"input\");i.setAttribute(\"type\",\"hidden\");i.setAttribute(\"name\",\"data\");i.setAttribute(\"value\",t);r.appendChild(i);document.body.appendChild(r);r.submit()},URLLoader:{xhttp:\"\",cb:\"\",load:function(t,n,r,i){this.cb=n;if(e.XMLHttpRequest){this.xhttp=new XMLHttpRequest}else{this.xhttp=new ActiveXObject(\"Microsoft.XMLHTTP\")}if(!r)r=\"GET\";if(r==\"GET\"&&i){t+=\"?\"+i}var s=this;this.xhttp.onreadystatechange=function(){s.onStatus()};this.xhttp.open(r,t,true);if(r==\"POST\"){this.xhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");this.xhttp.setRequestHeader(\"Content-length\",i.length);this.xhttp.setRequestHeader(\"Connection\",\"close\")}try{this.xhttp.send(i)}catch(o){}},onStatus:function(t){if(this.xhttp.readyState==4){if(this.xhttp.status==200||e.location.href.indexOf(\"http\")==-1){this.cb(this.xhttp.responseText,this.xhttp.responseXML)}else{}}else{}}},Browser:{getInternetExplorerVersion:function(){var e=-1;if(navigator.appName==\"Microsoft Internet Explorer\"){var t=navigator.userAgent;var n=new RegExp(\"MSIE ([0-9]{1,}[.0-9]{0,})\");if(n.exec(t)!=null)e=parseFloat(RegExp.$1)}return e},isIE:navigator.appVersion.indexOf(\"MSIE\")!=-1,isIE9:function(){return Utensil.Browser.getInternetExplorerVersion()>8},isMobile:/iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase())},getTarget:function(e){return e.currentTarget?e.currentTarget:e.srcElement},events:{},addListener:function(e,t,n){if(e.attachEvent){e.attachEvent(\"on\"+t,n)}else{e.addEventListener(t,n)}},removeListener:function(e,t,n){if(e.detachEvent){e.detachEvent(\"on\"+t,n)}else{e.removeEventListener(t,n)}},loadParams:{getValue:function(t){t=t.replace(/[\[]/,\"\\[\").replace(/[\]]/,\"\\]\");var n=\"[\\?&]\"+t+\"=([^&#]*)\";var r=new RegExp(n);var i=r.exec(e.location.href);if(i==null)return\"\";else return i[1]},getHostURL:function(){var e=new String(document.URL.replace(/\/[^\/]+$/,\"\"));if(e.charAt(e.length-1)!=\"/\")e=e+\"/\";return e}},addPackage:function(e,t){var n=this;if(t&&!this[t]){this[t]={};n=this[t]}for(var r in e){var i=e[r];n[r]=i}}}})(window);var Event={COMPLETE:\"EVENT_COMPLETE\",PROGRESS:\"EVENT_PROGRESS\",addListener:function(e,t,n,r){var i=[];var s=arguments.length;for(var o=0;o<s;o++){i.push(arguments[o])}i=i.length>3?i.splice(3,i.length-1):[];if(!e.listeners)e.listeners={};if(typeof e.listeners[t]!=\"undefined\"){e.listeners[t].push({scope:r,callback:n,args:i})}else{e.listeners[t]=[{scope:r,callback:n,args:i}]}},removeListener:function(e,t,n,r){if(typeof e.listeners[t]!=\"undefined\"){var i=e.listeners[t].length;var s=[];for(var o=0;o<i;o++){var u=e.listeners[t][o];if(u.scope==r&&u.callback==n){}else{s.push(u)}}e.listeners[t]=s}},dispatch:function(e,t,n,r){var i=0;var s={type:t,target:n,args:r};var r=[];var o=arguments.length;for(var u=0;u<o;u++){r.push(arguments[u])}r=r.length>2?r.splice(2,r.length-1):[];r=[s].concat(r);if(e.listeners&&typeof e.listeners[t]!=\"undefined\"){var a=e.listeners[t].length;for(var u=0;u<a;u++){var f=e.listeners[t][u];if(f&&f.callback){f.args=r.concat(f.args);f.callback.apply(f.scope,f.args);i+=1}}}}};var ResourceManager={assetJson:[],assets:null,copyUrl:null,copy:null,currentIndex:0,currentAsset:null,images:[],totalAssets:0,preloadImages:true,addAssets:function(e){this.assetJson.push(e)},addCopy:function(e){if(typeof e==\"string\"){this.copyUrl=e}else{this.copy=e}},mergeObjects:function(){this.assets={};for(var e=0;e<this.assetJson.length;e++){for(prop in this.assetJson[e]){this.assets[prop]=this.assetJson[e][prop]}}this.assetJson=null},init:function(){this.currentIndex=0;this.checkAssetJson(this.currentIndex)},checkAssetJson:function(e){if(this.assetJson[e]){this.currentIndex=e;if(typeof this.assetJson[e]==\"string\"){Utensil.URLLoader.load(this.assetJson[e],this.onAssetLoaded)}else{this.onAssetLoaded()}}else{this.assetsInitialised()}},assetsInitialised:function(){this.currentIndex=0;this.mergeObjects();this.loadAsset()},loadAsset:function(){if(this.assets){var e=0;for(var t in this.assets){if(e==this.currentIndex){this.currentAsset=this.assets[t];this.currentAsset.name=t}e++}this.totalAssets=e;var n=this;if(this.currentAsset!=null&&this.currentAsset.path!=null){this.currentIndex++;var r=this.currentAsset.path.split(\".\");var i=r[r.length-1];var s=i.toLowerCase().indexOf(\"jpg\")>=0||i.toLowerCase().indexOf(\"jpeg\")>=0||i.toLowerCase().indexOf(\"png\")>=0||i.toLowerCase().indexOf(\"gif\")>=0;if(this.preloadImages==true&&s){var o=new Image;this.images[this.currentAsset.name]=o;Utensil.addListener(o,\"load\",function(){n.onAssetComplete()});o.src=this.currentAsset.path}else{n.onAssetComplete()}}}},onAssetComplete:function(e){this.currentAsset=null;if(this.currentIndex>=this.totalAssets){this.currentIndex=0;if(this.copyUrl){Utensil.URLLoader.load(this.copyUrl,this.onCopyLoaded)}else{Event.dispatch(this,Event.COMPLETE)}}else{this.loadAsset()}},onAssetLoaded:function(t,x){if(t)ResourceManager.assetJson[ResourceManager.currentIndex]=eval(\"(\"+t+\")\");ResourceManager.currentIndex++;ResourceManager.checkAssetJson(ResourceManager.currentIndex)},onCopyLoaded:function(t,x){ResourceManager.copy=eval(\"(\"+t+\")\");Event.dispatch(ResourceManager,Event.COMPLETE)},getAssetByName:function(e){for(var t in this.assets){if(t==e){var n=this.assets[t];var r=n.path.split(\".\")[1];var i=r.toLowerCase().indexOf(\"jpg\")>=0||r.toLowerCase().indexOf(\"jpeg\")>=0||r.toLowerCase().indexOf(\"png\")>=0||r.toLowerCase().indexOf(\"gif\")>=0;if(this.preloadImages==true&&i){var s=this.images[n.name];return s}else{return n}}}return null},getCopyByID:function(e){if(this.copy[e])return this.copy[e]}};var Int=function(e){return parseInt(e)};var Layout=function(){};Layout.prototype={verticalGap:0,horizontalGap:0,left:0,top:0,bottom:0,right:0,arrange:function(e){}};var VerticalLayout=function(){this.arrange=function(e){var t=e.childContainer;var n=0;for(var r=0;r<t.childNodes.length;r++){var i=t.childNodes[r];i.style.top=n+\"px\";var s=i.clientHeight;if(s==0)s=i.style.height.replace(\"px\",\"\");n+=parseInt(s)+this.verticalGap}}};Class.extend(VerticalLayout,Layout);var HorizontalLayout=function(){this.arrange=function(e){var t=e.childContainer;var n=0;for(var r=0;r<t.childNodes.length;r++){var i=t.childNodes[r];i.style.left=n+\"px\";var s=i.clientWidth;if(s==0)s=i.style.width.replace(\"px\",\"\");n+=parseInt(s)+this.horizontalGap}}};Class.extend(HorizontalLayout,Layout);var PaddedLayout=function(){this.arrange=function(e){var t=e.childContainer;for(var n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];var i=parseInt(r.style.left.replace(\"px\",\"\")?r.style.left.replace(\"px\",\"\"):0);var s=parseInt(r.style.top.replace(\"px\",\"\")?r.style.top.replace(\"px\",\"\"):0);r.style.top=parseInt(s+this.top)+\"px\";r.style.left=parseInt(i+this.left)+\"px\"}}};Class.extend(PaddedLayout,Layout);var GridLayout=function(){this.arrange=function(e){var t=e.wrapper?e.wrapper:e.childContainer;var n=this.left;var r=this.top;var i=0;var s=0;var o=parseInt(e.width()-this.right);this.clearGrid(t);for(var u=0;u<t.childNodes.length;u++){var a=t.childNodes[u];if(a.className.indexOf(\"scroll\")<0&&a.className.indexOf(\"mcontentwrapper\")<0){var f=parseInt(a.style.left.replace(\"px\",\"\")?a.style.left.replace(\"px\",\"\"):0);var l=parseInt(a.style.top.replace(\"px\",\"\")?a.style.top.replace(\"px\",\"\"):0);if(u>0){if(n+parseInt(a.clientWidth)>=o){s++;i=0;n=this.left}}if(s>0){var c=this.getChildHeight(t,s-1,i);r=parseInt(c.y)+parseInt(c.height)+parseInt(this.verticalGap)}a.style.top=parseInt(r)+\"px\";a.style.left=parseInt(n)+\"px\";a.setAttribute(\"gridCol\",i);a.setAttribute(\"gridRow\",s);n+=parseInt(a.clientWidth)+parseInt(this.horizontalGap);i++}}};this.getChildHeight=function(e,t,n){for(var r=0;r<e.childNodes.length;r++){var i=e.childNodes[r];if(parseInt(i.getAttribute(\"gridCol\"))==n&&parseInt(i.getAttribute(\"gridRow\"))==t){return{height:i.clientHeight,y:parseInt(i.style.top.replace(\"px\",\"\")?i.style.top.replace(\"px\",\"\"):0)}}}};this.clearGrid=function(e){for(var t=0;t<e.childNodes.length;t++){var n=e.childNodes[t];n.setAttribute(\"gridCol\",\"\");n.setAttribute(\"gridRow\",\"\")}}};Class.extend(GridLayout,Layout);var ScrollLayout=function(){this.arrange=function(e){if(!window.scrollerIndex)window.scrollerIndex=0;if(!this.trackId)this.trackId+=window.scrollerIndex;if(!this.holderId)this.holderId+=window.scrollerIndex;if(!this.thumbId)this.thumbId+=window.scrollerIndex;if(!this.thumbId)window.scrollerIndex++;this.e=e;var t=e.childContainer;e.height(this.scrollHeight);this.maxHeight=e.childContainer.clientHeight;for(var n=0;n<e.childContainer.childNodes.length;n++){var r=e.childContainer.childNodes[n];var i=r.style.top?r.style.top.replace(\"px\",\"\"):0;var s=r.clientHeight;var o=parseInt(i)+parseInt(s);if(o>this.maxHeight){this.maxHeight=o}}if(this.maxHeight>this.scrollHeight){this.childHeight(e.childContainer,this.maxHeight);this.removeScroller();this.createScrollbar(e);e.width(e.width()-this.track.clientWidth);this.childX(this.track,parseInt(e.width()))}else{var u=this.removeScroller();e.width(e.width()+u)}};this.createScrollbar=function(e){if(!e)return;var t=e.childContainer;if(!this.holder){this.holder=document.createElement(\"div\");this.holder.id=this.holderId;this.holder.style.overflow=\"hidden\";this.holder.style.position=\"relative\";this.childHeight(this.holder,this.scrollHeight);e.display.removeChild(t);this.holder.appendChild(t);e.display.appendChild(this.holder)}if(!this.track){this.track=document.createElement(\"div\");this.track.id=this.trackId;this.resetStyle(this.track);this.track.className=this.trackStyle;this.childHeight(this.track,this.scrollHeight);e.addUIChild(this.track);this.childX(this.track,parseInt(e.width()));this.childWidth(t,parseInt(e.width())-parseInt(this.horizontalGap));this.childWidth(this.holder,parseInt(e.width())-parseInt(this.horizontalGap))}if(!this.thumb){this.thumb=document.createElement(\"div\");this.thumb.id=this.thumbId;this.resetStyle(this.thumb);this.thumb.className=this.thumbStyle;this.thumb.style.cursor=\"pointer\";var n=this.scrollHeight/this.maxHeight;this.childHeight(this.thumb,n*this.scrollHeight);this.track.appendChild(this.thumb);var r=this;this.onMouseDownHandler=function(e){r.onMouseDown(e)};this.onScrollWheelHandler=function(e){r.onScrollWheel(e)};Utensil.addListener(this.thumb,\"mousedown\",this.onMouseDownHandler);this.addEvent(e.display,\"mousewheel\",this.onScrollWheelHandler)}};this.removeScroller=function(){var e=this.e.childContainer;var t=0;if(this.track){t=this.track.clientWidth;if(document.getElementById(this.trackId))document.getElementById(this.trackId).parentNode.removeChild(this.track);this.track=null}if(this.thumb){if(document.getElementById(this.thumbId))document.getElementById(this.thumbId).parentNode.removeChild(this.thumb);Utensil.removeListener(this.thumb,\"mousedown\",this.onMouseDownHandler);this.thumb=null;if(this.holder){if(document.getElementById(this.holderId)){this.e.display.removeChild(this.holder);this.holder.removeChild(e)}this.e.display.appendChild(e);this.holder=null}}this.removeEvent(this.e.display,\"mousewheel\",this.onScrollWheelHandler);this.reset();return t};this.reset=function(){this.e.childContainer.style.top=\"0px\"};this.onScrollWheel=function(e){e=e?e:window.event;var t=e.detail?e.detail*-1:e.wheelDelta/40;this.startY=parseInt(this.childY(this.thumb))+Number(t);this.onMouseMove(e,parseInt(this.childY(this.thumb))-Number(t*10))};this.onMouseDown=function(e){this.startX=Utensil.mouseX(document.body,e);this.startY=Utensil.mouseY(document.body,e)-this.childY(this.thumb);var t=this;this.onMouseMoveHandler=function(e){t.onMouseMove(e)};this.onMouseUpHandler=function(e){t.onMouseUp(e)};Utensil.addListener(document,\"mousemove\",this.onMouseMoveHandler);Utensil.addListener(document,\"mouseup\",this.onMouseUpHandler);if(e&&e.preventDefault){e.preventDefault()}else{window.event.returnValue=false}return false};this.onMouseMove=function(e,t){var n=t!=undefined?t:Utensil.mouseY(document.body,e)-this.startY;var r=0;if(n<=0)n=0;if(Number(n)+parseInt(this.thumb.clientHeight)>=this.scrollHeight){n=this.scrollHeight-parseInt(this.thumb.clientHeight);r=this.paddingBottom}this.childY(this.thumb,n);var i=this.maxHeight/this.scrollHeight;this.e.childContainer.style.top=-(parseInt(this.childY(this.thumb)*i)+r)+\"px\";if(e&&e.preventDefault){e.preventDefault()}else{window.event.returnValue=false}return false};this.onMouseUp=function(e){Utensil.removeListener(document,\"mousemove\",this.onMouseMoveHandler);Utensil.removeListener(document,\"mouseup\",this.onMouseUpHandler)};this.childX=function(e,t){if(t==undefined){return e.style.left?e.style.left.replace(\"px\",\"\"):0}else{e.style.left=t+\"px\"}};this.childY=function(e,t){if(t==undefined){return e.style.top?e.style.top.replace(\"px\",\"\"):0}else{e.style.top=t+\"px\"}};this.childWidth=function(e,t){if(t==undefined){return e.style.width?e.style.width.replace(\"px\",\"\"):0}else{e.style.width=t+\"px\"}};this.childHeight=function(e,t){if(t==undefined){return e.style.height?e.style.height.replace(\"px\",\"\"):0}else{e.style.height=t+\"px\"}};this.resetStyle=function(e){e.style.position=\"absolute\";e.style.top=\"0px\"};this.addEvent=function(e,t,n){if(typeof e==\"string\")e=document.getElementById(e);if(e==null)return;if(e.addEventListener){if(t==\"mousewheel\")t=/Firefox/i.test(navigator.userAgent)?\"DOMMouseScroll\":\"mousewheel\";e.addEventListener(t,n,false)}else if(e.attachEvent)e.attachEvent(\"on\"+t,n)};this.removeEvent=function(e,t,n){if(typeof e==\"string\")e=document.getElementById(e);if(e==null)return;if(e.removeEventListener){if(t==\"mousewheel\")t=/Firefox/i.test(navigator.userAgent)?\"DOMMouseScroll\":\"mousewheel\";e.removeEventListener(t,n,false)}else if(e.detachEvent)e.detachEvent(\"on\"+t,n)}};Class.extend(ScrollLayout,Layout);var _=ScrollLayout.prototype;_.track;_.thumb;_.holder;_.scrollHeight=10;_.paddingBottom=10;_.trackStyle=\"scrollTrack\";_.thumbStyle=\"scrollThumb\";_.holderId=\"scrollHolder\";_.trackId=\"scrollTrack\";_.thumbId=\"scrollThumb\";_.e;_.startX;_.startY;_.maxHeight=0;var DisplayObject=function(){this.display=null;this.elemName=\"div\"};DisplayObject.prototype={props:{},style:function(e){e.style.position=\"absolute\"},init:function(){var e=document.createElement(this.elemName);this.display=e;for(prop in this.props){this.styleProp(prop,this.props[prop].value,this.props[prop].suffix)}this.style(e)},styleProp:function(e,t,n){if(!this.display){this.props[e]={value:t,suffix:n};return t}if(t!=undefined){this.display.style[e]=t+(n?n:\"\")}else{return this.display.style[e]?this.display.style[e].replace(\"px\",\"\"):\"\"}},className:function(e){if(e!=undefined){this.display.className=e}else{return this.display.className}},x:function(e){return Number(this.styleProp(\"left\",e,\"px\"))},y:function(e){return Number(this.styleProp(\"top\",e,\"px\"))},width:function(e){return Number(this.styleProp(\"width\",e,\"px\"))},height:function(e){return Number(this.styleProp(\"height\",e,\"px\")!=\"\"?this.styleProp(\"height\",e,\"px\"):this.display.clientHeight)},visible:function(e){if(e!=undefined){e==true?e=\"visible\":e=\"hidden\";this.styleProp(\"visibility \",e)}else{return this.styleProp(\"visibility \",e)==\"visible\"?true:false}},alpha:function(e){if(e!=undefined){this.props.alpha=e;if(this.display){this.display.style[\"opacity\"]=e;this.display.style[\"-khtml-opacity\"]=e;this.display.style[\"-moz-opacity\"]=e;this.display.style[\"filter\"]=\"alpha(opacity=\"+e*100+\")\"}}else{return Number(this.props.alpha==undefined?1:this.props.alpha)}},buttonMode:function(e){if(e==true){this.display.style.cursor=\"pointer\"}else{this.display.style.cursor=\"auto\"}},startX:function(){var e=this.x();if(Utensil.getX(this.display,true)>e){return Utensil.getX(this.display,true)-e}return e},startY:function(){var e=this.y();if(Utensil.getY(this.display,true)>e){return Utensil.getY(this.display,true)-e}return e},startDrag:function(){var e=\"mousemove\";if(\"ontouchstart\"in document.documentElement)e=\"ontouchstart\";var t=this;var n=this.startX();var r=this.startY();this.dragHandler=function(e){t.onDragMove(e,n,r)};Utensil.addListener(document,e,this.dragHandler)},onDragMove:function(e,t,n){this.x(Utensil.mouseX(document.body,e)-t);this.y(Utensil.mouseY(document.body,e)-n)},stopDrag:function(){var e=\"mousemove\";if(\"ontouchstart\"in document.documentElement)e=\"ontouchstart\";Utensil.removeListener(document,e,this.dragHandler)},hitTestObject:function(e){var t=parseInt(this.x());var n=parseInt(e.x());var r=t+parseInt(this.width());var i=n+parseInt(e.width());var s=parseInt(this.y());var o=parseInt(e.y());var u=s+parseInt(this.height());var a=o+parseInt(e.height());if(r>=n&&t<=i){}else{return false}if(u>=o&&s<=a){}else{return false}return true},hitTestPoint:function(e,t){if(e>=this.x()&&e<=parseInt(this.x())+parseInt(this.width())&&t>=this.y()&&t<=parseInt(this.y())+parseInt(this.height())){return true}return false},rotation:function(e){this.rotateObj(this.display,e)},rotateObj:function(e,t){deg_str=t+\"\";rotate_transform=\"rotate(\"+t+\"deg)\";matrix_str=this.degreeToIEMatrix(t);filter_str=\"progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', \"+matrix_str+\")\";e.style[\"rotation\"]=deg_str+\"deg\";e.style[\"-ms-transform\"]=rotate_transform;e.style.MozTransform=rotate_transform;e.style.OTransform=rotate_transform;e.style.WebkitTransform=rotate_transform;radians=parseInt(t)*Math.PI*2/360;calSin=Math.sin(radians);calCos=Math.cos(radians);if(e.style.filter){e.style.filter=\"progid:DXImageTransform.Microsoft.Matrix(M11=\"+calCos+\", M12=-\"+calSin+\",M21=\"+calSin+\", M22=\"+calCos+', sizingMethod=\"auto expand\")'}if(e.style[\"ms-filter\"])e.style[\"ms-filter\"]=\"progid:DXImageTransform.Microsoft.Matrix(M11=\"+calCos+\", M12=-\"+calSin+\",M21=\"+calSin+\", M22=\"+calCos+', sizingMethod=\"auto expand\")';if(Utensil.Browser.isIE&&Utensil.Browser.getInternetExplorerVersion()<9){e.style.filter=filter_str;e.style[\"ms-filter\"]=filter_str;e.style[\"zoom\"]=\"1\"}},degreeToIEMatrix:function(e){var t=Math.PI*2/360;var n=e*t;var r=Math.cos(n);var i=Math.sin(n);var s=r;var o=-i;var u=i;var a=r;return\"M11=\"+s+\", M12=\"+o+\", M21=\"+u+\", M22=\"+a}};var UIElement=function(){};(function(){var e=Class.extend(UIElement,DisplayObject);e.layoutCollection=null;e.childContainer=null;e.state=\"\";e.handlers={};e.build=function(){Class._super(this,\"init\");var e=document.createElement(\"div\");this.childContainer=e;this.display.appendChild(e);this.styleChildContainer()};e.styleChildContainer=function(){this.childContainer.style.position=\"relative\";this.childContainer.style.display=\"block\"};e.addChild=function(e){this.childContainer.appendChild(e.display?e.display:e)};e.removeChild=function(e){this.childContainer.removeChild(e.display?e.display:e)};e.addUIChild=function(e){this.display.appendChild(e.display?e.display:e)};e.removeUIChild=function(e){if(!e)return;this.display.removeChild(e.display?e.display:e)};e.layout=function(e){if(!this.layoutCollection)this.layoutCollection=[];if(e!=undefined&&typeof e==\"object\"){this.layoutCollection.push(e)}else if(e!=undefined&&typeof e==\"function\"){for(var t=0;t<this.layoutCollection.length;t++){if(this.layoutCollection[t]instanceof e){return this.layoutCollection[t]}}}else{return this.layoutCollection[this.layoutCollection.length-1]}return null};e.removeLayout=function(e){if(e!=undefined&&typeof e==\"function\"){for(var t=0;t<this.layoutCollection.length;t++){if(this.layoutCollection[t]instanceof e){delete this.layoutCollection[t];this.layoutCollection.splice(t,1)}}}};e.createHandler=function(e,t){var n=e;e.handlers[t]=function(e){n[t](e)};return e.handlers[t]};e.removeHandler=function(e,t){if(e.handlers[t]){delete e.handlers[t]}};e.setStyle=function(){};e.arrange=function(){if(!this.layoutCollection)return;for(var e=0;e<this.layoutCollection.length;e++){this.layoutCollection[e].arrange(this)}};e.bareWidth=function(){return this.childContainer.clientWidth};e.bareHeight=function(){return this.childContainer.clientHeight}})();var Label=function(){this.field;this.text=function(e){if(!this.field){this.field=document.createElement(\"div\");this.field.style.position=\"relative\";this.addChild(this.field)}if(e!=undefined){this.field.innerHTML=e}else{return this.field.innerHTML}}};(function(){var e=Class.extend(Label,UIElement)})();var Button=function(){};(function(){var e=Class.extend(Button,UIElement);e.bgImage=null;e.buttonMouseOver=null;e.buttonMouseOut=null;e.buttonMouseClick=null;e.labelClassName=function(e){this.label.className(e)};e.label=null;e.build=function(){Class._super(this,\"build\");this.label=new Label;this.label.build();this.label.text(\"\");this.addChild(this.label);this.disableSelection(this.label.display)};e.setStyle=function(){Class._super(this,\"setStyle\");this.label.width(this.width());if(!this.labelClassName){this.label.display.style.textAlign=\"center\"}};e.asset=function(e){if(e){this.bgImage=new Image;this.bgImage.src=typeof e==\"object\"?e.src:e;this.display.style.backgroundImage=\"url(\"+this.bgImage.src+\")\"}};e.text=function(e){if(e!=undefined){this.label.display.innerHTML=e}else{return this.label.displayinnerHTML}};e.activate=function(){this.display.style.cursor=\"pointer\";var e=this;this.buttonMouseOver=function(t){e.onMouseOver(t)};this.buttonMouseOut=function(t){e.onMouseOut(t)};this.buttonMouseClick=function(t){e.onMouseClick(t)};Utensil.addListener(this.display,\"mouseover\",this.buttonMouseOver);Utensil.addListener(this.display,\"mouseout\",this.buttonMouseOut);Utensil.addListener(this.display,\"mousedown\",this.buttonMouseClick)};e.deactivate=function(){this.display.style.cursor=\"default\";Utensil.removeListener(this.display,\"mouseover\",this.buttonMouseOver);Utensil.removeListener(this.display,\"mouseout\",this.buttonMouseOut);Utensil.removeListener(this.display,\"mousedown\",this.buttonMouseClick);this.buttonMouseOver=null;this.buttonMouseOut=null};e.onMouseOver=function(e){this.display.style.backgroundPosition=\"0px -\"+this.height()+\"px\"};e.onMouseOut=function(e){this.display.style.backgroundPosition=\"0px \"+\"0px\"};e.onMouseClick=function(e){this.display.style.backgroundPosition=\"0px -\"+this.height()*2+\"px\"};e.disable=function(){this.deactivate();this.display.style.backgroundPosition=\"0px -\"+this.height()*3+\"px\"};e.disableSelection=function(e){e.style[\"-moz-user-select\"]=\"-moz-none\";e.style[\"-khtml-user-select\"]=\"none\";e.style[\"-ms-user-select\"]=\"none\";e.style[\"user-selectt\"]=\"none\";e.style[\"-webkit-user-select\"]=\"none\"}})();var Sprite=function(){};(function(){var e=Class.extend(Sprite,UIElement);e.isGradient=false;e.htcURL=\"lib/com/fahimchowdhury/PIE.htc\";e.lineStyle=function(e,t){var n=e!=undefined?e:1;var r=t!=undefined?t:\"#000\";this.display.style.border=\"solid \"+n+\"px \"+r;delete n;delete r};e.beginGradientFill=function(e,t,n){this.isGradient=true;this.display.style.background=t[0];this.display.style.background=\"-webkit-gradient(linear, left top, left bottom, from(\"+t[0]+\"), to(\"+t[1]+\"))\";this.display.style.background=\"-moz-linear-gradient(top,  \"+t[0]+\",  \"+t[0]+\")\";this.display.style[\"filter\"]=\"progid:DXImageTransform.Microsoft.gradient(startColorstr='\"+t[0]+\"', endColorstr='\"+t[1]+\"',GradientType=0);\"};e.drawRect=function(e,t,n,r,i,s){this.x(e);this.y(t);this.width(n);this.height(r);this.setColor(i)};e.drawRoundRect=function(e,t,n,r,i,s){this.x(e);this.y(t);this.width(n);this.height(r);this.setColor(s);this.setCorners(i)};e.drawCircle=function(e,t,n,r){this.x(e);this.y(t);this.width(n*2);this.height(n*2);this.setColor(r);this.setCorners(n)};e.setColor=function(e){if(e&&!this.isGradient)this.display.style.backgroundColor=e};e.setCorners=function(e){this.display.style.behavior=\"url(\"+this.htcURL+\")\";this.display.style.webkitBorderRadius=e+\"px\";this.display.style.MozBorderRadius=e+\"px\";this.display.style[\"-moz-border-radius\"]=e+\"px\";this.display.style.borderRadius=e+\"px\";this.display.style[\"border-radius\"]=e+\"px \"+e+\"px \"+e+\"px \"+e+\"px\"}})();var MovieClip=function(){};(function(){var e=Class.extend(MovieClip,UIElement);window.frameRate=50;window.frameCount=0;window.clips=[];e.frameRate=100;e.timer=null;e.TO=0;e.FROM=0;e.BG_SIZE=\"bg_size\";e.LOOP=false;e.img=null;e.cFrame=0;e.attach=function(e){this.img=e;this.img.style.position=\"absolute\";this.display.style.overflow=\"hidden\";this.addChild(e)};e.stop=function(){for(var e=0;e<window.clips.length;e++){if(window.clips[e]==this){this.resetMC();window.clips.splice(e,1);if(window.clips.length==0){clearInterval(window.enterFrameTimer);window.enterFrameTimer=null}return}}};e.currentFrame=function(){return Math.round(this.width()/this.getPos().left)};e.resetMC=function(){this.TO=0;this.FROM=0;this.LOOP=false};e.gotoAndStop=function(e){this.stop();e=e?e:0;this.resetMC();this.setFrame(e)};e.gotoAndPlay=function(e,t,n){this.stop();this.TO=t;this.FROM=e;this.LOOP=n?n:false;this.setFrame(e);window.clips.push(this);var r=this;if(!window.enterFrameTimer){window.enterFrameTimer=setInterval(window.onEnterFrame,window.frameRate)}};window.onEnterFrame=function(){for(var e=0;e<window.clips.length;e++){var t=window.clips[e];var n=Math.round(window.frameCount*window.frameRate)%t.frameRate/100;if(n==0){var r=t.TO;var i=t.FROM;var s=t.LOOP;var o=t.cFrame;o++;if(o<=r||String(s)==\"true\"){t.setFrame(o,String(s)==\"true\"?i:null,r)}else{window.clips.splice(e,1);t.resetMC();if(window.clips.length==0){clearInterval(window.enterFrameTimer);window.enterFrameTimer=null}}}}window.frameCount++;if(window.frameCount>=1e3){window.frameCount=0}};e.setFrame=function(e,t,n){var r=this.img.width;var i=this.width()*e;if(i>r||t!=null&&n!=null&&n<e){if(t!=null){e=t}else{e=Math.round(r/this.width())}i=this.width()*e}else{}var s=this.getPos().top;this.img.style.top=s+\"px\";this.img.style.left=\"-\"+i+\"px \";this.cFrame=e};e.getPos=function(){var e=this.img.style.top;var t=this.img.style.left;if(e){e=this.replaceSuffix(e)}else{e=\"0\"}if(t){t=this.replaceSuffix(t)}else{t=\"0\"}return{left:t,top:e}};e.replaceSuffix=function(e){e=e.replace(\"%\",\"\");e=e.replace(\"px\",\"\");return e};e.getBGSize=function(){var e=this.getStyle(\"backgroundImage\");e=e.replace(\"url(\",\"\");e=e.replace(\")\",\"\");e=e.replace('\"',\"\");e=e.replace('\"',\"\");var t=new Image;t.src=e;var n=t.width,r=t.height;t=null;return{width:n,height:r}};e.topPosition=function(e){if(e==undefined){return this.getPos().top}else{this.img.style.top=e+\"px\"}};e.getStyle=function(e){if(this.img.currentStyle)return this.img.currentStyle[e]?this.img.currentStyle[e].replace(\"px\",\"\"):\"\";else if(document.defaultView&&document.defaultView.getComputedStyle)return document.defaultView.getComputedStyle(this.img,\"\")[e].replace(\"px\",\"\");else return this.img.style[e].replace(\"px\",\"\")}})();var Engine=function(){this.event={READY:\"ENGINE_READY\"};this.prop={width:0,height:0,grid:false,cellSize:10,gridCellIndex:0,gridCellId:\"cell-\",occupiedXY:[],ignoreCells:[],layer:{bgId:\"engineBGLayer\",character:\"engineCharacterLayer\",front:\"engineFrontLayer\"},container:null};this.holder=null;this.container=function(e){if(e==undefined){var t;if(!this.prop.container){t=document.body}else{t=document.getElementById(this.prop.container)}return t}this.prop.container=e};this.showGrid=function(e){if(e==undefined){return this.prop.grid}else{this.prop.grid=e}};this.init=function(){this.createGrid();this.astar.parent=this};this.createGrid=function(){this.holder=new UIElement;this.holder.build();this.holder.width(this.width());this.holder.height(this.height());this.holder.setStyle();var e=parseInt(this.width()/this.cellSize());var t=parseInt(this.height()/this.cellSize());this.astar.rows=t;this.astar.cols=e;var n=0;var r=0;var i=false;var s;while(!i){if(!this.astar.grid[n])this.astar.grid[n]=[];this.astar.setCell(n,r,false);if(this.prop.grid){s=new Sprite;s.build();s.lineStyle();s.drawRect(r*this.cellSize(),n*this.cellSize(),this.cellSize(),this.cellSize(),null);s.setStyle();this.holder.addChild(s);s.arrange();s.display.id=this.prop.gridCellId+r+\"_\"+n}this.prop.gridCellIndex++;r++;if(r>=e){n++;r=0}if(n>=t){i=true}}this.holder.arrange();this.createLayers();this.container().appendChild(this.holder.display)};this.createLayers=function(){var e=new UIElement;e.build();e.width(this.width());e.height(this.height());e.setStyle();e.arrange();e.display.id=this.prop.layer.bgId;this.holder.addChild(e);e=new UIElement;e.build();e.width(this.width());e.height(this.height());e.setStyle();e.arrange();e.display.id=this.prop.layer.character;this.holder.addChild(e);e=new UIElement;e.build();e.width(this.width());e.height(this.height());e.setStyle();e.arrange();e.display.id=this.prop.layer.front;this.holder.addChild(e)};this.addToBackgroundLayer=function(e){var t=document.getElementById(this.prop.layer.bgId);if(e.display){t.appendChild(e.display)}else{t.appendChild(e)}};this.addToCharacterLayer=function(e){var t=document.getElementById(this.prop.layer.character);if(e.display){t.appendChild(e.display)}else{t.appendChild(e)}};this.addToFrontLayer=function(e){var t=document.getElementById(this.prop.layer.front);if(e.display){t.appendChild(e.display)}else{t.appendChild(e)}};this.removeFromBackgroundLayer=function(e){var t=document.getElementById(this.prop.layer.bgId);if(e.display){t.removeChild(e.display)}else{t.removeChild(e)}};this.removeFromCharacterLayer=function(e){var t=document.getElementById(this.prop.layer.character);if(e.display){t.removeChild(e.display)}else{t.removeChild(e)}};this.removeFromFrontLayer=function(e){var t=document.getElementById(this.prop.layer.front);if(e.display){t.removeChild(e.display)}else{t.removeChild(e)}};this.setCell=function(e,t,n){var r=this.prop.gridCellId+e+\"_\"+t;var i=document.getElementById(r);if(!i)return;i.style.backgroundColor=n?n:\"#f00\"};this.ignoreBlocks=function(e,t){var n=this.getXCell(t==undefined?e.x():e);var r=this.getYCell(t==undefined?e.y():t);var i=this.getXCell(t==undefined?Int(e.x())+Int(e.width()):e);var s=this.getYCell(t==undefined?Int(e.y())+Int(e.height()):t);var o=false;var u=n;while(!o){this.setIgnoreXY(u,r);u++;if(u>=i){u=n;r++}if(r>=s)o=true}};this.addObstacle=function(e,t){var n=this.getXCell(t==undefined?e.x():e);var r=this.getYCell(t==undefined?e.y():t);var i=this.getXCell(t==undefined?Int(e.x())+Int(e.width()):e);var s=this.getYCell(t==undefined?Int(e.y())+Int(e.height()):t);var o=n;var u=r;while(o<i){while(u<s){this.setOccupiedXY(o,u);this.astar.setCell(u,o,true);u++}u=r;o++}delete o;delete u;delete n;delete r;delete i;delete s};this.setOccupiedXY=function(e,t){if(!this.prop.occupiedXY[e])this.prop.occupiedXY[e]=[];this.prop.occupiedXY[e][t]=e+\",\"+t};this.setIgnoreXY=function(e,t){if(!this.prop.ignoreCells[e])this.prop.ignoreCells[e]=[];this.prop.ignoreCells[e][t]=e+\",\"+t};this.getOccupiedXY=function(e,t){var n;var r;if(e.x){n=this.getXCell(e.x());r=this.getYCell(e.y());var i=this.getXCell(Int(e.x())+Int(e.width()));var s=this.getYCell(Int(e.y())+Int(e.height()));var o=n;var u=false;var a=false;while(!a){if(this.prop.occupiedXY[o]&&this.prop.occupiedXY[o][r])u=true;o++;if(o>=i){o=n;r++}if(r>s)a=true}if(u)return true}else{n=this.getXCell(e);r=this.getYCell(t);if(this.prop.occupiedXY[n]&&this.prop.occupiedXY[n][r])return true}return false};this.findPathTo=function(e,t,n){var r=this.getXCell(e.x());var i=this.getYCell(e.y());var s=this.getXCell(t);var o=this.getYCell(n);this.setCell(r,i,\"purple\");this.setCell(s,o,\"yellow\");return this.astar.search(r,i,s,o)};this.drawPath=function(e){if(!this.prop.grid)return;for(var t=0;t<e.length;t++){this.setCell(e[t][0],e[t][0],\"#00f\")}};this.getXCell=function(e){return Math.floor(e/this.cellSize())};this.getYCell=function(e){return Math.floor(e/this.cellSize())};this.cellSize=function(e){if(e==undefined){return this.prop.cellSize}else{this.prop.cellSize=e}};this.width=function(e){if(e==undefined){return this.prop.width}else{this.prop.width=e}};this.height=function(e){if(e==undefined){return this.prop.height}else{this.prop.height=e}};this.astar={grid:[],opened:[],start:null,target:null,parent:null,last:null,rows:0,cols:0,pos:function(e,t){this.x=e;this.y=t;this.cost=0;this.totalcost=0;this.blocked=false;this.closed=false;this.prev=null;this.str=function(){return this.x+\",\"+this.y};this.equal=function(e){return this.x==e.x&&this.y==e.y}},opencell:function(e,t,n){if(!e||e.blocked)return null;if(n&&n.prev&&!n.equal(this.start)){if(e.x-n.x!=n.x-n.prev.x||e.y-n.y!=n.y-n.prev.y)t+=4}var r=parseFloat(t)+14*(Math.abs(e.x-this.target.x)+Math.abs(e.y-this.target.y));if(e.totalcost!=0){if(r<e.totalcost){var i;for(i=0;i<this.opened.length;++i){if(e.equal(this.opened[i])){this.opened.splice(i,1);break}}}else return null}e.cost=t;e.prev=n;e.totalcost=r;var s=0;for(s=0;s<this.opened.length;++s){if(e.totalcost<this.opened[s].totalcost){this.opened.splice(s,0,e);break}}if(s>=this.opened.length)this.opened[s]=e;if(!this.grid[e.y])return null;this.grid[e.y][e.x]=e;this.last=e;return e},openadjacent:function(e){var t=this.grid[e.y][e.x].cost+10;if(e.x>0)this.opencell(this.grid[e.y][e.x-1],t,e);if(e.y>0)this.opencell(this.grid[e.y-1][e.x],t,e);if(e.y<this.rows-1)this.opencell(this.grid[e.y- -1][e.x],t,e);if(e.x<this.cols-1)this.opencell(this.grid[e.y][e.x- -1],t,e)},search:function(e,t,n,r){var i;var s=0;this.setstart(new this.pos(e,t));this.settarget(new this.pos(n,r));i=this.opencell(this.start,0,this.start);while(i&&!i.equal(this.target)){i.closed=true;this.opened.shift();this.openadjacent(i);if(this.opened.length>0)i=this.opened[0];else i=null;if(++s>1e4){i=null;break}}if(!i){return}var o=[];while(!i.equal(this.start)){o.push({x:i.x*this.parent.cellSize(),y:i.y*this.parent.cellSize()});this.parent.setCell(i.x,i.y,\"#00f\");i=i.prev;if(!i){break}}if(o)o.reverse();return o},setCell:function(e,t,n){if(!this.grid[e])return;this.grid[e][t]={};this.grid[e][t].cost=0;this.grid[e][t].totalcost=0;this.grid[e][t].prev=null;this.grid[e][t].closed=false;this.grid[e][t].blocked=n?true:false;this.grid[e][t].x=t;this.grid[e][t].y=e;this.grid[e][t].str=function(){return this.x+\",\"+this.y};this.grid[e][t].equal=function(e){return this.x==e.x&&this.y==e.y};if(n)this.parent.setCell(t,e,\"#f00\")},setblock:function(e,t,n,r){for(var i=e.y;i<=t.y;++i){for(var s=e.x;s<=t.x;++s){if(!r.grid[i]||!r.grid[i][s])return;if(n){r.parent.setCell(s,i,\"#f00\");r.grid[i][s].blocked=true}else{r.parent.setCell(s,i);r.grid[i][s].blocked=false}}}},wipe:function(){var e,t;if(!this.parent||!this.start)return;this.opened=[];for(e=0;e<this.rows;++e){for(t=0;t<this.cols;++t){this.grid[e][t].cost=0;this.grid[e][t].totalcost=0;this.grid[e][t].prev=null;this.grid[e][t].closed=false;if(this.grid[e][t].blocked)this.parent.setCell(t,e,\"#f00\");else this.parent.setCell(t,e,\"#fff\")}}this.parent.setCell(this.start.x,this.start.y,\"none\");this.parent.setCell(this.target.x,this.target.y,\"none\")},setstart:function(e){if(this.start){this.parent.setCell(e.x,e.y,\"yellow\")}this.start=e;this.parent.setCell(e.x,e.y,\"purple\")},settarget:function(e){if(this.target){this.parent.setCell(e.x,e.y,\"yellow\")}this.target=e;this.parent.setCell(e.x,e.y,\"yellow\")}}};var IIterator={reset:function(){},next:function(){},hasNext:function(){},index:function(){},purge:function(){},length:function(){}};var ArrayIterator=function(e){this._index=0;this._collection=e;this.reset=function(){this._index=0};this.next=function(){return this._collection[this._index++]};this.hasNext=function(){return this._index<this._collection.length};this.length=function(){return this._collection.length};this.index=function(){return this._index};this.purge=function(){delete this._collection}};Class.implement(ArrayIterator,IIterator);var Collection=function(e){this._collection=e?e:[];this.reverse=function(){this._collection=this._collection.reverse()};this.iterator=function(){return new ArrayIterator(this._collection)};this.find=function(e,t){var n=this.iterator();var r;if(e==\"\"&&!t&&n.hasNext()){r=n.next()}if(r){n.purge();n=null;return r}while(n.hasNext()){r=n.next();if(r.hasOwnProperty(e)&&r[e]==t)return r;if((e||t)&&(r==e||r==t))return r}n.purge();n=null;return null};this.addItem=function(e){this._collection.push(e)};this.addItemAt=function(e,t){this._collection.splice(t,0,e)};this.getItemAt=function(e){return this._collection[e]};this.removeItem=function(e,t){var n=-1;var r=this.iterator();while(r.hasNext()){var i=r.next();if(i.hasOwnProperty(e)&&i[e]==t){n=r.index()-1;break}}r.purge();r=null;return this._collection.splice(n,1)};this.removeItemAt=function(e){this._collection.splice(e,1)};this.length=function(){return this._collection?this._collection.length:0};this.purge=function(){if(!this._collection)return;while(this._collection.length>0){this.removeItemAt(this._collection.length-1)}}};var ContextMenu=function(){};(function(){var e=Class.extend(ContextMenu,UIElement);e.state=\"hidden\";e.f12State=\"enabled\";e.customItems=[];e.build=function(){Class._super(this,\"build\");this.width(170);this.height(18);Utensil.addListener(document,\"contextmenu\",this.createHandler(this,\"onRightClick\"));this.layout(new VerticalLayout);this.layout().verticalGap=5;this.layout(new PaddedLayout);this.layout().top=10;this.layout().bottom=0;this.addItems();this.setStyle()};e.addItems=function(){for(var e=0;e<this.customItems.length;e++){if(this.customItems[e].separatorBefore)this.customItems[e].display.style.borderTop=\"1px solid #e9e9e9\";if(this.customItems[e].separatorAfter)this.customItems[e].display.style.borderBottom=\"1px solid #e9e9e9\";this.addChild(this.customItems[e])}};e.onRightClick=function(e){if(this.state!=\"showing\"){document.body.appendChild(this.display);this.x(Utensil.mouseX(document.body,e));this.y(Utensil.mouseY(document.body,e));this.arrange();this.state=\"showing\";Utensil.addListener(document,\"click\",this.createHandler(this,\"onDOMClick\"))}if(e.preventDefault){e.preventDefault()}else{e.returnValue=false}if(e.stopPropagation){e.stopPropagation()}else{e.cancelBubble=true}return false};e.onDOMClick=function(e){document.body.removeChild(this.display);this.state=\"hidden\";Utensil.removeListener(document,\"click\",this.handlers[\"onDOMClick\"]);this.removeHandler(this,\"onDOMClick\")};e.setStyle=function(){Class._super(this,\"setStyle\");this.display.style.backgroundColor=\"#fff\";this.display.style.border=\"1px solid #bababa\";this.display.style[\"-moz-box-shadow\"]=\"5px 5px 5px rgba(68,68,68,0.6)\";this.display.style[\"-webkit-box-shadow\"]=\"5px 5px 5px rgba(68,68,68,0.6)\";this.display.style[\"box-shadow\"]=\"5px 5px 5px rgba(68,68,68,0.6)\"};e.disableF12=function(e){if(!e)return this.f12State;this.f12State=e;if(this.f12State){Utensil.addListener(document,\"keydown\",this.onF12KeyPress)}else{Utensil.removeListener(document,\"keydown\",this.onF12KeyPress)}};e.onF12KeyPress=function(e){e=e||window.event;if(e.keyCode==123){if(e.preventDefault){e.preventDefault()}else{e.returnValue=false}if(e.stopPropagation){e.stopPropagation()}else{e.cancelBubble=true}return false}};e.arrange=function(){this.height(this.customItems.length*25+this.layout().top+this.layout().bottom);Class._super(this,\"arrange\")}})();var ContextMenuItem=function(e,t){this.itemName=e;this.itemCallback=t;this.build();this.setStyle();this.arrange();return this};(function(){var e=Class.extend(ContextMenuItem,Label);e.separatorBefore=false;e.separatorAfter=false;e.build=function(){Class._super(this,\"build\");this.text(this.itemName);if(this.itemCallback){Utensil.addListener(this.display,\"click\",this.itemCallback);Utensil.addListener(this.display,\"mouseover\",this.createHandler(this,\"mouseOver\"));Utensil.addListener(this.display,\"mouseout\",this.createHandler(this,\"mouseOut\"));this.display.style.cursor=\"pointer\"}};e.mouseOver=function(e){this.display.style.backgroundColor=\"#efefef\"};e.mouseOut=function(e){this.display.style.backgroundColor=\"transparent\"};e.setStyle=function(){this.display.style.fontFamily=\"Arial, Helvetica, sans-serif\";this.display.style.fontSize=\"11px\";this.display.style.textAlign=\"center\";this.display.style.paddingTop=\"2px\";this.width(170);this.height(15)}})();var IModel={set:function(e,t){},get:function(e){},remove:function(e){}};var Model=function(e){this.set=function(e,t){this[e]=t};this.get=function(e){if(this[e]!=undefined){return this[e]}return null};this.remove=function(e){if(this[e])delete this[e]};this.init=function(e){if(e){for(var t in e){this.set(t,e[t])}}};if(e)this.init(e)};Class.implement(Model,IModel);var ViewModel=function(e){this.TYPE_ID=\"ViewModel_TYPE_ID\";this.type=this.TYPE_ID;this.set=function(e,t){Class._super(this,\"set\",e,t);if(document.getElementById(e)&&this.type==this.TYPE_ID){document.getElementById(e).innerHTML=t}};Class._super(this,\"init\",e)};Class.extend(ViewModel,Model);var StyleSheet={props:{defaultFontSize:null,defaultStageWidth:null,defaultStageHeight:null},getFontSize:function(e){var t=this.getStyle(e,\"font-size\");if(t.indexOf(\"em\")>-1){var n=this.getStyle(document.body,\"font-size\");if(n.indexOf(\"pt\")>-1){n=Math.round(parseInt(n)*96/72)}else{n=parseInt(n)}t=Math.round(n*parseFloat(t))}else if(t.indexOf(\"pt\")>-1){t=Math.round(parseInt(t)*96/72)}return parseInt(t)},getStyle:function(e,t){var n=false;if(e.currentStyle){var r=t.split(\"-\");var s=new String(\"\");for(i in r){s+=i>0?r[i].substr(0,1).toUpperCase()+r[i].substr(1):r[i]}n=e.currentStyle[s]}else if(window.getComputedStyle){n=window.getComputedStyle(e,null).getPropertyValue(t)}return n},autoSizeFont:function(e){if(e){Utensil.addListener(window,\"resize\",StyleSheet.resizeFont);StyleSheet.resizeFont()}else{Utensil.removeListener(window,\"resize\",StyleSheet.resizeFont)}},resizeRatio:function(){if(!StyleSheet.props.defaultStageWidth){StyleSheet.props.defaultStageWidth=Utensil.stageWidth();StyleSheet.props.defaultStageHeight=Utensil.stageHeight()}var e=Utensil.stageWidth()/StyleSheet.props.defaultStageWidth;var t=Utensil.stageHeight()/StyleSheet.props.defaultStageHeight;if(t<e)e=t;e=e.toFixed(2);if(e>1)e=1;return e},resizeFont:function(){if(!StyleSheet.props.defaultFontSize){StyleSheet.props.defaultFontSize=StyleSheet.getFontSize(Utensil.stage(),\"font-size\");StyleSheet.props.defaultStageWidth=Utensil.stageWidth();StyleSheet.props.defaultStageHeight=Utensil.stageHeight()}var e=StyleSheet.resizeRatio();var t=10/StyleSheet.props.defaultFontSize*100*e;t=t.toFixed(2);Utensil.stage().style.fontSize=Math.round(t)+\"%\"}}";
						$this -> makeFile("lib/fahimchowdhury/toolkitMax-v1014-compressed.js", $js);
					}

					public function makeFolder($path) {
						if (!file_exists($path)) {
							mkdir($path, 0777, true);
						}
						$this -> displayMessage("Created folder called " . $path, "folder");
					}

					public function displayMessage($str, $className) {
						echo "<p class='" . ($className ? $className : "") . "'>" . $str . "</p>";
					}

					public function makeFile($url, $data) {
						if (!file_exists($url))
							file_put_contents($url, $data);
						$this -> displayMessage("Created file called " . $url, "file");
					}

				}

				$autoProjectSetup = new AutoProjectSetup();
				$autoProjectSetup -> init();
				?>
			</div>
			<p class="msg">
				Please Delete 'setup.php'
			</p>
		</div>
		<?php
		/*
		 $data=file_get_contents("jasmine/jasmine.js");
		 $data = str_replace(array("\n"),"|_|",$data);
		 $autoProjectSetup->makeFile("temp.js",$data);
		 */
		?>
		<div class="footer">
			<p>
				github: <a href="https://github.com/fahimc/AutoProjectSetup" >https://github.com/fahimc/AutoProjectSetup</a>
			</p>
		</div>
	</body>
</html>
